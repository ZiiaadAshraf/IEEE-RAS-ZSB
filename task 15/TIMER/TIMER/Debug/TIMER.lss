
TIMER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000750  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  00800060  00800060  00000750  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000780  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d2d  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000444  00000000  00000000  000016f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001098  00000000  00000000  00001b35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000638  00000000  00000000  00002bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007c7c  00000000  00000000  00003208  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001097  00000000  00000000  0000ae84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  0000bf1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000140d  00000000  00000000  0000c0e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	37 c0       	rjmp	.+110    	; 0x74 <__bad_interrupt>
   6:	00 00       	nop
   8:	35 c0       	rjmp	.+106    	; 0x74 <__bad_interrupt>
   a:	00 00       	nop
   c:	33 c0       	rjmp	.+102    	; 0x74 <__bad_interrupt>
   e:	00 00       	nop
  10:	dc c2       	rjmp	.+1464   	; 0x5ca <__vector_4>
  12:	00 00       	nop
  14:	b1 c2       	rjmp	.+1378   	; 0x578 <__vector_5>
  16:	00 00       	nop
  18:	86 c2       	rjmp	.+1292   	; 0x526 <__vector_6>
  1a:	00 00       	nop
  1c:	5b c2       	rjmp	.+1206   	; 0x4d4 <__vector_7>
  1e:	00 00       	nop
  20:	30 c2       	rjmp	.+1120   	; 0x482 <__vector_8>
  22:	00 00       	nop
  24:	05 c2       	rjmp	.+1034   	; 0x430 <__vector_9>
  26:	00 00       	nop
  28:	da c1       	rjmp	.+948    	; 0x3de <__vector_10>
  2a:	00 00       	nop
  2c:	af c1       	rjmp	.+862    	; 0x38c <__vector_11>
  2e:	00 00       	nop
  30:	21 c0       	rjmp	.+66     	; 0x74 <__bad_interrupt>
  32:	00 00       	nop
  34:	1f c0       	rjmp	.+62     	; 0x74 <__bad_interrupt>
  36:	00 00       	nop
  38:	1d c0       	rjmp	.+58     	; 0x74 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1b c0       	rjmp	.+54     	; 0x74 <__bad_interrupt>
  3e:	00 00       	nop
  40:	87 c0       	rjmp	.+270    	; 0x150 <__vector_16>
  42:	00 00       	nop
  44:	17 c0       	rjmp	.+46     	; 0x74 <__bad_interrupt>
  46:	00 00       	nop
  48:	15 c0       	rjmp	.+42     	; 0x74 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	13 c0       	rjmp	.+38     	; 0x74 <__bad_interrupt>
  4e:	00 00       	nop
  50:	11 c0       	rjmp	.+34     	; 0x74 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 38       	cpi	r26, 0x8A	; 138
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	ff d2       	rcall	.+1534   	; 0x670 <main>
  72:	32 c3       	rjmp	.+1636   	; 0x6d8 <_exit>

00000074 <__bad_interrupt>:
  74:	c5 cf       	rjmp	.-118    	; 0x0 <__vectors>

00000076 <ADC_voidInit>:
	else
	{
		Local_u8ErrorState = NULL_POINTER;
	}
	return Local_u8ErrorState;
}
  76:	3e 9a       	sbi	0x07, 6	; 7
  78:	3f 9a       	sbi	0x07, 7	; 7
  7a:	3d 98       	cbi	0x07, 5	; 7
  7c:	86 b1       	in	r24, 0x06	; 6
  7e:	88 7f       	andi	r24, 0xF8	; 248
  80:	86 b9       	out	0x06, r24	; 6
  82:	86 b1       	in	r24, 0x06	; 6
  84:	87 60       	ori	r24, 0x07	; 7
  86:	86 b9       	out	0x06, r24	; 6
  88:	37 9a       	sbi	0x06, 7	; 6
  8a:	33 9a       	sbi	0x06, 3	; 6
  8c:	08 95       	ret

0000008e <ADC_u8GetResultSync>:
  8e:	61 15       	cp	r22, r1
  90:	71 05       	cpc	r23, r1
  92:	99 f1       	breq	.+102    	; 0xfa <ADC_u8GetResultSync+0x6c>
  94:	90 91 60 00 	lds	r25, 0x0060
  98:	91 11       	cpse	r25, r1
  9a:	31 c0       	rjmp	.+98     	; 0xfe <ADC_u8GetResultSync+0x70>
  9c:	91 e0       	ldi	r25, 0x01	; 1
  9e:	90 93 60 00 	sts	0x0060, r25
  a2:	97 b1       	in	r25, 0x07	; 7
  a4:	90 7e       	andi	r25, 0xE0	; 224
  a6:	97 b9       	out	0x07, r25	; 7
  a8:	97 b1       	in	r25, 0x07	; 7
  aa:	89 2b       	or	r24, r25
  ac:	87 b9       	out	0x07, r24	; 7
  ae:	36 9a       	sbi	0x06, 6	; 6
  b0:	34 99       	sbic	0x06, 4	; 6
  b2:	15 c0       	rjmp	.+42     	; 0xde <ADC_u8GetResultSync+0x50>
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	dc 01       	movw	r26, r24
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	a1 1d       	adc	r26, r1
  be:	b1 1d       	adc	r27, r1
  c0:	34 99       	sbic	0x06, 4	; 6
  c2:	08 c0       	rjmp	.+16     	; 0xd4 <ADC_u8GetResultSync+0x46>
  c4:	80 35       	cpi	r24, 0x50	; 80
  c6:	23 ec       	ldi	r18, 0xC3	; 195
  c8:	92 07       	cpc	r25, r18
  ca:	a1 05       	cpc	r26, r1
  cc:	b1 05       	cpc	r27, r1
  ce:	a9 f7       	brne	.-22     	; 0xba <ADC_u8GetResultSync+0x2c>
  d0:	84 e0       	ldi	r24, 0x04	; 4
  d2:	10 c0       	rjmp	.+32     	; 0xf4 <ADC_u8GetResultSync+0x66>
  d4:	80 35       	cpi	r24, 0x50	; 80
  d6:	93 4c       	sbci	r25, 0xC3	; 195
  d8:	a1 05       	cpc	r26, r1
  da:	b1 05       	cpc	r27, r1
  dc:	51 f0       	breq	.+20     	; 0xf2 <ADC_u8GetResultSync+0x64>
  de:	34 9a       	sbi	0x06, 4	; 6
  e0:	84 b1       	in	r24, 0x04	; 4
  e2:	25 b1       	in	r18, 0x05	; 5
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	92 2b       	or	r25, r18
  e8:	fb 01       	movw	r30, r22
  ea:	91 83       	std	Z+1, r25	; 0x01
  ec:	80 83       	st	Z, r24
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <ADC_u8GetResultSync+0x66>
  f2:	84 e0       	ldi	r24, 0x04	; 4
  f4:	10 92 60 00 	sts	0x0060, r1
  f8:	08 95       	ret
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	08 95       	ret
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	08 95       	ret

00000102 <ADC_u8StartConversionAsynch>:
 102:	61 15       	cp	r22, r1
 104:	71 05       	cpc	r23, r1
 106:	f1 f0       	breq	.+60     	; 0x144 <ADC_u8StartConversionAsynch+0x42>
 108:	41 15       	cp	r20, r1
 10a:	51 05       	cpc	r21, r1
 10c:	e9 f0       	breq	.+58     	; 0x148 <ADC_u8StartConversionAsynch+0x46>
 10e:	90 91 60 00 	lds	r25, 0x0060
 112:	91 11       	cpse	r25, r1
 114:	1b c0       	rjmp	.+54     	; 0x14c <ADC_u8StartConversionAsynch+0x4a>
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	90 93 60 00 	sts	0x0060, r25
 11c:	10 92 65 00 	sts	0x0065, r1
 120:	70 93 69 00 	sts	0x0069, r23
 124:	60 93 68 00 	sts	0x0068, r22
 128:	50 93 67 00 	sts	0x0067, r21
 12c:	40 93 66 00 	sts	0x0066, r20
 130:	97 b1       	in	r25, 0x07	; 7
 132:	90 7e       	andi	r25, 0xE0	; 224
 134:	97 b9       	out	0x07, r25	; 7
 136:	97 b1       	in	r25, 0x07	; 7
 138:	89 2b       	or	r24, r25
 13a:	87 b9       	out	0x07, r24	; 7
 13c:	36 9a       	sbi	0x06, 6	; 6
 13e:	33 9a       	sbi	0x06, 3	; 6
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	08 95       	ret
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	08 95       	ret
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	08 95       	ret
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	08 95       	ret

00000150 <__vector_16>:

void __vector_16(void)  __attribute__((signal));
void __vector_16(void)
{
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	2f 93       	push	r18
 15c:	3f 93       	push	r19
 15e:	4f 93       	push	r20
 160:	5f 93       	push	r21
 162:	6f 93       	push	r22
 164:	7f 93       	push	r23
 166:	8f 93       	push	r24
 168:	9f 93       	push	r25
 16a:	af 93       	push	r26
 16c:	bf 93       	push	r27
 16e:	ef 93       	push	r30
 170:	ff 93       	push	r31
	if (ADC_u8ISRState == SINGLE_CHANNEL_ASYNCH)
 172:	80 91 65 00 	lds	r24, 0x0065
 176:	81 11       	cpse	r24, r1
 178:	13 c0       	rjmp	.+38     	; 0x1a0 <__vector_16+0x50>
	{
		#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT
		*ADC_pu16AsynchConversionResult = (ADCL | (ADCH << 8));
 17a:	84 b1       	in	r24, 0x04	; 4
 17c:	25 b1       	in	r18, 0x05	; 5
 17e:	e0 91 68 00 	lds	r30, 0x0068
 182:	f0 91 69 00 	lds	r31, 0x0069
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	92 2b       	or	r25, r18
 18a:	91 83       	std	Z+1, r25	; 0x01
 18c:	80 83       	st	Z, r24
		#elif ADC_ADJUSTMENT == LEFT_ADJUSTMENT
		*ADC_pu16AsynchConversionResult = ADCH;
		#else
		#error "Wrong ADC_ADJUSTMENT config"
		#endif
		ADC_u8State = IDLE;
 18e:	10 92 60 00 	sts	0x0060, r1
		ADC_pvNotificationFunc();
 192:	e0 91 66 00 	lds	r30, 0x0066
 196:	f0 91 67 00 	lds	r31, 0x0067
 19a:	09 95       	icall
		CLR_BIT(ADSAR , ADSAR_ADIE);
 19c:	33 98       	cbi	0x06, 3	; 6
 19e:	2c c0       	rjmp	.+88     	; 0x1f8 <__vector_16+0xa8>
	}
	else
	{
		#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT
		*ADC_pu16AsynchConversionResult = (ADCL | (ADCH << 8));
 1a0:	84 b1       	in	r24, 0x04	; 4
 1a2:	25 b1       	in	r18, 0x05	; 5
 1a4:	e0 91 68 00 	lds	r30, 0x0068
 1a8:	f0 91 69 00 	lds	r31, 0x0069
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	92 2b       	or	r25, r18
 1b0:	91 83       	std	Z+1, r25	; 0x01
 1b2:	80 83       	st	Z, r24
		#elif ADC_ADJUSTMENT == LEFT_ADJUSTMENT
		*ADC_pu16AsynchConversionResult = ADCH;
		#else
		#error "Wrong ADC_ADJUSTMENT config"
		#endif
		ADC_u8Index++;
 1b4:	80 91 61 00 	lds	r24, 0x0061
 1b8:	8f 5f       	subi	r24, 0xFF	; 255
 1ba:	80 93 61 00 	sts	0x0061, r24
		if (ADC_u8Index == ADC_u8ChainSize)
 1be:	90 91 62 00 	lds	r25, 0x0062
 1c2:	89 13       	cpse	r24, r25
 1c4:	09 c0       	rjmp	.+18     	; 0x1d8 <__vector_16+0x88>
		{
			ADC_u8State = IDLE;
 1c6:	10 92 60 00 	sts	0x0060, r1
			ADC_pvNotificationFunc();
 1ca:	e0 91 66 00 	lds	r30, 0x0066
 1ce:	f0 91 67 00 	lds	r31, 0x0067
 1d2:	09 95       	icall
			CLR_BIT(ADSAR , ADSAR_ADIE);
 1d4:	33 98       	cbi	0x06, 3	; 6
 1d6:	10 c0       	rjmp	.+32     	; 0x1f8 <__vector_16+0xa8>
		}
		else
		{
			ADMUX &= ADC_CH_MASK;
 1d8:	87 b1       	in	r24, 0x07	; 7
 1da:	80 7e       	andi	r24, 0xE0	; 224
 1dc:	87 b9       	out	0x07, r24	; 7
			ADMUX |= ADC_pu8ChainChannel[ADC_u8Index];
 1de:	97 b1       	in	r25, 0x07	; 7
 1e0:	80 91 61 00 	lds	r24, 0x0061
 1e4:	e0 91 63 00 	lds	r30, 0x0063
 1e8:	f0 91 64 00 	lds	r31, 0x0064
 1ec:	e8 0f       	add	r30, r24
 1ee:	f1 1d       	adc	r31, r1
 1f0:	80 81       	ld	r24, Z
 1f2:	89 2b       	or	r24, r25
 1f4:	87 b9       	out	0x07, r24	; 7
			SET_BIT(ADSAR , ADSAR_ADSC);
 1f6:	36 9a       	sbi	0x06, 6	; 6
		}
	}
}
 1f8:	ff 91       	pop	r31
 1fa:	ef 91       	pop	r30
 1fc:	bf 91       	pop	r27
 1fe:	af 91       	pop	r26
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	7f 91       	pop	r23
 206:	6f 91       	pop	r22
 208:	5f 91       	pop	r21
 20a:	4f 91       	pop	r20
 20c:	3f 91       	pop	r19
 20e:	2f 91       	pop	r18
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <DIO_enumSetPinDirection>:
  
  DIO_ErrorState DIO_enumSetPinDirection  (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Dierction )
  {
	DIO_ErrorState LOC_enumState = DIO_OK ;

	  if (Copy_u8Dierction == DIO_PIN_OUTPUT)
 21a:	41 30       	cpi	r20, 0x01	; 1
 21c:	c1 f5       	brne	.+112    	; 0x28e <DIO_enumSetPinDirection+0x74>
	  {
		  switch ( Copy_u8Port){
 21e:	81 30       	cpi	r24, 0x01	; 1
 220:	91 f0       	breq	.+36     	; 0x246 <DIO_enumSetPinDirection+0x2c>
 222:	28 f0       	brcs	.+10     	; 0x22e <DIO_enumSetPinDirection+0x14>
 224:	82 30       	cpi	r24, 0x02	; 2
 226:	d9 f0       	breq	.+54     	; 0x25e <DIO_enumSetPinDirection+0x44>
 228:	83 30       	cpi	r24, 0x03	; 3
 22a:	29 f1       	breq	.+74     	; 0x276 <DIO_enumSetPinDirection+0x5c>
 22c:	6e c0       	rjmp	.+220    	; 0x30a <DIO_enumSetPinDirection+0xf0>
			 case DIO_PORTA : SET_BIT (DDRA, Copy_u8Pin);break;
 22e:	2a b3       	in	r18, 0x1a	; 26
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_enumSetPinDirection+0x20>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_enumSetPinDirection+0x1c>
 23e:	82 2b       	or	r24, r18
 240:	8a bb       	out	0x1a, r24	; 26
  #include "C:\Users\hp\Documents\Atmel Studio\7.0\TIMER\TIMER\DIO_interface.h"
  #include "C:\Users\hp\Documents\Atmel Studio\7.0\TIMER\TIMER\DIO_private.h"
  
  DIO_ErrorState DIO_enumSetPinDirection  (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Dierction )
  {
	DIO_ErrorState LOC_enumState = DIO_OK ;
 242:	81 e0       	ldi	r24, 0x01	; 1

	  if (Copy_u8Dierction == DIO_PIN_OUTPUT)
	  {
		  switch ( Copy_u8Port){
			 case DIO_PORTA : SET_BIT (DDRA, Copy_u8Pin);break;
 244:	08 95       	ret
			 case DIO_PORTB : SET_BIT (DDRB, Copy_u8Pin);break;
 246:	27 b3       	in	r18, 0x17	; 23
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_enumSetPinDirection+0x38>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_enumSetPinDirection+0x34>
 256:	82 2b       	or	r24, r18
 258:	87 bb       	out	0x17, r24	; 23
  #include "C:\Users\hp\Documents\Atmel Studio\7.0\TIMER\TIMER\DIO_interface.h"
  #include "C:\Users\hp\Documents\Atmel Studio\7.0\TIMER\TIMER\DIO_private.h"
  
  DIO_ErrorState DIO_enumSetPinDirection  (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Dierction )
  {
	DIO_ErrorState LOC_enumState = DIO_OK ;
 25a:	81 e0       	ldi	r24, 0x01	; 1

	  if (Copy_u8Dierction == DIO_PIN_OUTPUT)
	  {
		  switch ( Copy_u8Port){
			 case DIO_PORTA : SET_BIT (DDRA, Copy_u8Pin);break;
			 case DIO_PORTB : SET_BIT (DDRB, Copy_u8Pin);break;
 25c:	08 95       	ret
			 case DIO_PORTC : SET_BIT (DDRC, Copy_u8Pin);break;
 25e:	24 b3       	in	r18, 0x14	; 20
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_enumSetPinDirection+0x50>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_enumSetPinDirection+0x4c>
 26e:	82 2b       	or	r24, r18
 270:	84 bb       	out	0x14, r24	; 20
  #include "C:\Users\hp\Documents\Atmel Studio\7.0\TIMER\TIMER\DIO_interface.h"
  #include "C:\Users\hp\Documents\Atmel Studio\7.0\TIMER\TIMER\DIO_private.h"
  
  DIO_ErrorState DIO_enumSetPinDirection  (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Dierction )
  {
	DIO_ErrorState LOC_enumState = DIO_OK ;
 272:	81 e0       	ldi	r24, 0x01	; 1
	  if (Copy_u8Dierction == DIO_PIN_OUTPUT)
	  {
		  switch ( Copy_u8Port){
			 case DIO_PORTA : SET_BIT (DDRA, Copy_u8Pin);break;
			 case DIO_PORTB : SET_BIT (DDRB, Copy_u8Pin);break;
			 case DIO_PORTC : SET_BIT (DDRC, Copy_u8Pin);break;
 274:	08 95       	ret
			 case DIO_PORTD : SET_BIT (DDRD, Copy_u8Pin);break;
 276:	21 b3       	in	r18, 0x11	; 17
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_enumSetPinDirection+0x68>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_enumSetPinDirection+0x64>
 286:	82 2b       	or	r24, r18
 288:	81 bb       	out	0x11, r24	; 17
  #include "C:\Users\hp\Documents\Atmel Studio\7.0\TIMER\TIMER\DIO_interface.h"
  #include "C:\Users\hp\Documents\Atmel Studio\7.0\TIMER\TIMER\DIO_private.h"
  
  DIO_ErrorState DIO_enumSetPinDirection  (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Dierction )
  {
	DIO_ErrorState LOC_enumState = DIO_OK ;
 28a:	81 e0       	ldi	r24, 0x01	; 1
	  {
		  switch ( Copy_u8Port){
			 case DIO_PORTA : SET_BIT (DDRA, Copy_u8Pin);break;
			 case DIO_PORTB : SET_BIT (DDRB, Copy_u8Pin);break;
			 case DIO_PORTC : SET_BIT (DDRC, Copy_u8Pin);break;
			 case DIO_PORTD : SET_BIT (DDRD, Copy_u8Pin);break;
 28c:	08 95       	ret
		  }
	  } 
	  else if (Copy_u8Dierction == DIO_PIN_INPUT) {
 28e:	41 11       	cpse	r20, r1
 290:	3e c0       	rjmp	.+124    	; 0x30e <DIO_enumSetPinDirection+0xf4>
		  switch ( Copy_u8Port){
 292:	81 30       	cpi	r24, 0x01	; 1
 294:	99 f0       	breq	.+38     	; 0x2bc <DIO_enumSetPinDirection+0xa2>
 296:	28 f0       	brcs	.+10     	; 0x2a2 <DIO_enumSetPinDirection+0x88>
 298:	82 30       	cpi	r24, 0x02	; 2
 29a:	e9 f0       	breq	.+58     	; 0x2d6 <DIO_enumSetPinDirection+0xbc>
 29c:	83 30       	cpi	r24, 0x03	; 3
 29e:	41 f1       	breq	.+80     	; 0x2f0 <DIO_enumSetPinDirection+0xd6>
 2a0:	38 c0       	rjmp	.+112    	; 0x312 <DIO_enumSetPinDirection+0xf8>
			 case DIO_PORTA : CLR_BIT (DDRA, Copy_u8Pin);break;
 2a2:	2a b3       	in	r18, 0x1a	; 26
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_enumSetPinDirection+0x94>
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_enumSetPinDirection+0x90>
 2b2:	80 95       	com	r24
 2b4:	82 23       	and	r24, r18
 2b6:	8a bb       	out	0x1a, r24	; 26
  #include "C:\Users\hp\Documents\Atmel Studio\7.0\TIMER\TIMER\DIO_interface.h"
  #include "C:\Users\hp\Documents\Atmel Studio\7.0\TIMER\TIMER\DIO_private.h"
  
  DIO_ErrorState DIO_enumSetPinDirection  (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Dierction )
  {
	DIO_ErrorState LOC_enumState = DIO_OK ;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
			 case DIO_PORTD : SET_BIT (DDRD, Copy_u8Pin);break;
		  }
	  } 
	  else if (Copy_u8Dierction == DIO_PIN_INPUT) {
		  switch ( Copy_u8Port){
			 case DIO_PORTA : CLR_BIT (DDRA, Copy_u8Pin);break;
 2ba:	08 95       	ret
			 case DIO_PORTB : CLR_BIT (DDRB, Copy_u8Pin);break;
 2bc:	27 b3       	in	r18, 0x17	; 23
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_enumSetPinDirection+0xae>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_enumSetPinDirection+0xaa>
 2cc:	80 95       	com	r24
 2ce:	82 23       	and	r24, r18
 2d0:	87 bb       	out	0x17, r24	; 23
  #include "C:\Users\hp\Documents\Atmel Studio\7.0\TIMER\TIMER\DIO_interface.h"
  #include "C:\Users\hp\Documents\Atmel Studio\7.0\TIMER\TIMER\DIO_private.h"
  
  DIO_ErrorState DIO_enumSetPinDirection  (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Dierction )
  {
	DIO_ErrorState LOC_enumState = DIO_OK ;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
		  }
	  } 
	  else if (Copy_u8Dierction == DIO_PIN_INPUT) {
		  switch ( Copy_u8Port){
			 case DIO_PORTA : CLR_BIT (DDRA, Copy_u8Pin);break;
			 case DIO_PORTB : CLR_BIT (DDRB, Copy_u8Pin);break;
 2d4:	08 95       	ret
			 case DIO_PORTC : CLR_BIT (DDRC, Copy_u8Pin);break;
 2d6:	24 b3       	in	r18, 0x14	; 20
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_enumSetPinDirection+0xc8>
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	6a 95       	dec	r22
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_enumSetPinDirection+0xc4>
 2e6:	80 95       	com	r24
 2e8:	82 23       	and	r24, r18
 2ea:	84 bb       	out	0x14, r24	; 20
  #include "C:\Users\hp\Documents\Atmel Studio\7.0\TIMER\TIMER\DIO_interface.h"
  #include "C:\Users\hp\Documents\Atmel Studio\7.0\TIMER\TIMER\DIO_private.h"
  
  DIO_ErrorState DIO_enumSetPinDirection  (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Dierction )
  {
	DIO_ErrorState LOC_enumState = DIO_OK ;
 2ec:	81 e0       	ldi	r24, 0x01	; 1
	  } 
	  else if (Copy_u8Dierction == DIO_PIN_INPUT) {
		  switch ( Copy_u8Port){
			 case DIO_PORTA : CLR_BIT (DDRA, Copy_u8Pin);break;
			 case DIO_PORTB : CLR_BIT (DDRB, Copy_u8Pin);break;
			 case DIO_PORTC : CLR_BIT (DDRC, Copy_u8Pin);break;
 2ee:	08 95       	ret
			 case DIO_PORTD : CLR_BIT (DDRD, Copy_u8Pin);break;
 2f0:	21 b3       	in	r18, 0x11	; 17
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_enumSetPinDirection+0xe2>
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	6a 95       	dec	r22
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_enumSetPinDirection+0xde>
 300:	80 95       	com	r24
 302:	82 23       	and	r24, r18
 304:	81 bb       	out	0x11, r24	; 17
  #include "C:\Users\hp\Documents\Atmel Studio\7.0\TIMER\TIMER\DIO_interface.h"
  #include "C:\Users\hp\Documents\Atmel Studio\7.0\TIMER\TIMER\DIO_private.h"
  
  DIO_ErrorState DIO_enumSetPinDirection  (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Dierction )
  {
	DIO_ErrorState LOC_enumState = DIO_OK ;
 306:	81 e0       	ldi	r24, 0x01	; 1
	  else if (Copy_u8Dierction == DIO_PIN_INPUT) {
		  switch ( Copy_u8Port){
			 case DIO_PORTA : CLR_BIT (DDRA, Copy_u8Pin);break;
			 case DIO_PORTB : CLR_BIT (DDRB, Copy_u8Pin);break;
			 case DIO_PORTC : CLR_BIT (DDRC, Copy_u8Pin);break;
			 case DIO_PORTD : CLR_BIT (DDRD, Copy_u8Pin);break;
 308:	08 95       	ret
  #include "C:\Users\hp\Documents\Atmel Studio\7.0\TIMER\TIMER\DIO_interface.h"
  #include "C:\Users\hp\Documents\Atmel Studio\7.0\TIMER\TIMER\DIO_private.h"
  
  DIO_ErrorState DIO_enumSetPinDirection  (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Dierction )
  {
	DIO_ErrorState LOC_enumState = DIO_OK ;
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	08 95       	ret
			 case DIO_PORTC : CLR_BIT (DDRC, Copy_u8Pin);break;
			 case DIO_PORTD : CLR_BIT (DDRD, Copy_u8Pin);break;
		  }
	  }
	  else {
		LOC_enumState = DIO_NOK ;
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	08 95       	ret
  #include "C:\Users\hp\Documents\Atmel Studio\7.0\TIMER\TIMER\DIO_interface.h"
  #include "C:\Users\hp\Documents\Atmel Studio\7.0\TIMER\TIMER\DIO_private.h"
  
  DIO_ErrorState DIO_enumSetPinDirection  (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Dierction )
  {
	DIO_ErrorState LOC_enumState = DIO_OK ;
 312:	81 e0       	ldi	r24, 0x01	; 1
	  else {
		LOC_enumState = DIO_NOK ;
	  }
	  return LOC_enumState;
	  
  }
 314:	08 95       	ret

00000316 <TIMER1_voidInit>:
	{
		Local_u8ErrorState = NULL_POINTER ;
	}

	return Local_u8ErrorState ;
}
 316:	8f b5       	in	r24, 0x2f	; 47
 318:	8e 7f       	andi	r24, 0xFE	; 254
 31a:	8f bd       	out	0x2f, r24	; 47
 31c:	8f b5       	in	r24, 0x2f	; 47
 31e:	82 60       	ori	r24, 0x02	; 2
 320:	8f bd       	out	0x2f, r24	; 47
 322:	8e b5       	in	r24, 0x2e	; 46
 324:	88 60       	ori	r24, 0x08	; 8
 326:	8e bd       	out	0x2e, r24	; 46
 328:	8e b5       	in	r24, 0x2e	; 46
 32a:	80 61       	ori	r24, 0x10	; 16
 32c:	8e bd       	out	0x2e, r24	; 46
 32e:	84 ef       	ldi	r24, 0xF4	; 244
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	9b bd       	out	0x2b, r25	; 43
 334:	8a bd       	out	0x2a, r24	; 42
 336:	19 bc       	out	0x29, r1	; 41
 338:	18 bc       	out	0x28, r1	; 40
 33a:	80 e2       	ldi	r24, 0x20	; 32
 33c:	9e e4       	ldi	r25, 0x4E	; 78
 33e:	97 bd       	out	0x27, r25	; 39
 340:	86 bd       	out	0x26, r24	; 38
 342:	8e b5       	in	r24, 0x2e	; 46
 344:	80 64       	ori	r24, 0x40	; 64
 346:	8e bd       	out	0x2e, r24	; 46
 348:	8f b5       	in	r24, 0x2f	; 47
 34a:	8f 7b       	andi	r24, 0xBF	; 191
 34c:	8f bd       	out	0x2f, r24	; 47
 34e:	8f b5       	in	r24, 0x2f	; 47
 350:	80 68       	ori	r24, 0x80	; 128
 352:	8f bd       	out	0x2f, r24	; 47
 354:	8f b5       	in	r24, 0x2f	; 47
 356:	8f 7e       	andi	r24, 0xEF	; 239
 358:	8f bd       	out	0x2f, r24	; 47
 35a:	8f b5       	in	r24, 0x2f	; 47
 35c:	80 62       	ori	r24, 0x20	; 32
 35e:	8f bd       	out	0x2f, r24	; 47
 360:	89 b7       	in	r24, 0x39	; 57
 362:	8b 7f       	andi	r24, 0xFB	; 251
 364:	89 bf       	out	0x39, r24	; 57
 366:	89 b7       	in	r24, 0x39	; 57
 368:	8f 7e       	andi	r24, 0xEF	; 239
 36a:	89 bf       	out	0x39, r24	; 57
 36c:	89 b7       	in	r24, 0x39	; 57
 36e:	87 7f       	andi	r24, 0xF7	; 247
 370:	89 bf       	out	0x39, r24	; 57
 372:	89 b7       	in	r24, 0x39	; 57
 374:	8f 7d       	andi	r24, 0xDF	; 223
 376:	89 bf       	out	0x39, r24	; 57
 378:	8e b5       	in	r24, 0x2e	; 46
 37a:	88 7f       	andi	r24, 0xF8	; 248
 37c:	8e bd       	out	0x2e, r24	; 46
 37e:	8e b5       	in	r24, 0x2e	; 46
 380:	82 60       	ori	r24, 0x02	; 2
 382:	8e bd       	out	0x2e, r24	; 46
 384:	08 95       	ret

00000386 <TIMER1_voidSetCTCA>:
 386:	9b bd       	out	0x2b, r25	; 43
 388:	8a bd       	out	0x2a, r24	; 42
 38a:	08 95       	ret

0000038c <__vector_11>:

/*TIMER0 Normal Mode ISR*/
void __vector_11 (void)		__attribute__((signal)) ;
void __vector_11 (void)
{
 38c:	1f 92       	push	r1
 38e:	0f 92       	push	r0
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	0f 92       	push	r0
 394:	11 24       	eor	r1, r1
 396:	2f 93       	push	r18
 398:	3f 93       	push	r19
 39a:	4f 93       	push	r20
 39c:	5f 93       	push	r21
 39e:	6f 93       	push	r22
 3a0:	7f 93       	push	r23
 3a2:	8f 93       	push	r24
 3a4:	9f 93       	push	r25
 3a6:	af 93       	push	r26
 3a8:	bf 93       	push	r27
 3aa:	ef 93       	push	r30
 3ac:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID] != NULL)
 3ae:	e0 91 80 00 	lds	r30, 0x0080
 3b2:	f0 91 81 00 	lds	r31, 0x0081
 3b6:	30 97       	sbiw	r30, 0x00	; 0
 3b8:	09 f0       	breq	.+2      	; 0x3bc <__vector_11+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID]() ;
 3ba:	09 95       	icall
	}
}
 3bc:	ff 91       	pop	r31
 3be:	ef 91       	pop	r30
 3c0:	bf 91       	pop	r27
 3c2:	af 91       	pop	r26
 3c4:	9f 91       	pop	r25
 3c6:	8f 91       	pop	r24
 3c8:	7f 91       	pop	r23
 3ca:	6f 91       	pop	r22
 3cc:	5f 91       	pop	r21
 3ce:	4f 91       	pop	r20
 3d0:	3f 91       	pop	r19
 3d2:	2f 91       	pop	r18
 3d4:	0f 90       	pop	r0
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	0f 90       	pop	r0
 3da:	1f 90       	pop	r1
 3dc:	18 95       	reti

000003de <__vector_10>:

/*TIMER0 CTC Mode ISR*/
void __vector_10 (void)		__attribute__((signal)) ;
void __vector_10 (void)
{
 3de:	1f 92       	push	r1
 3e0:	0f 92       	push	r0
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	0f 92       	push	r0
 3e6:	11 24       	eor	r1, r1
 3e8:	2f 93       	push	r18
 3ea:	3f 93       	push	r19
 3ec:	4f 93       	push	r20
 3ee:	5f 93       	push	r21
 3f0:	6f 93       	push	r22
 3f2:	7f 93       	push	r23
 3f4:	8f 93       	push	r24
 3f6:	9f 93       	push	r25
 3f8:	af 93       	push	r26
 3fa:	bf 93       	push	r27
 3fc:	ef 93       	push	r30
 3fe:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID] != NULL)
 400:	e0 91 7e 00 	lds	r30, 0x007E
 404:	f0 91 7f 00 	lds	r31, 0x007F
 408:	30 97       	sbiw	r30, 0x00	; 0
 40a:	09 f0       	breq	.+2      	; 0x40e <__vector_10+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID]() ;
 40c:	09 95       	icall
	}
}
 40e:	ff 91       	pop	r31
 410:	ef 91       	pop	r30
 412:	bf 91       	pop	r27
 414:	af 91       	pop	r26
 416:	9f 91       	pop	r25
 418:	8f 91       	pop	r24
 41a:	7f 91       	pop	r23
 41c:	6f 91       	pop	r22
 41e:	5f 91       	pop	r21
 420:	4f 91       	pop	r20
 422:	3f 91       	pop	r19
 424:	2f 91       	pop	r18
 426:	0f 90       	pop	r0
 428:	0f be       	out	0x3f, r0	; 63
 42a:	0f 90       	pop	r0
 42c:	1f 90       	pop	r1
 42e:	18 95       	reti

00000430 <__vector_9>:

/*TIMER1 Normal Mode ISR*/
void __vector_9 (void)		__attribute__((signal)) ;
void __vector_9 (void)
{
 430:	1f 92       	push	r1
 432:	0f 92       	push	r0
 434:	0f b6       	in	r0, 0x3f	; 63
 436:	0f 92       	push	r0
 438:	11 24       	eor	r1, r1
 43a:	2f 93       	push	r18
 43c:	3f 93       	push	r19
 43e:	4f 93       	push	r20
 440:	5f 93       	push	r21
 442:	6f 93       	push	r22
 444:	7f 93       	push	r23
 446:	8f 93       	push	r24
 448:	9f 93       	push	r25
 44a:	af 93       	push	r26
 44c:	bf 93       	push	r27
 44e:	ef 93       	push	r30
 450:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID] != NULL)
 452:	e0 91 7c 00 	lds	r30, 0x007C
 456:	f0 91 7d 00 	lds	r31, 0x007D
 45a:	30 97       	sbiw	r30, 0x00	; 0
 45c:	09 f0       	breq	.+2      	; 0x460 <__vector_9+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID]() ;
 45e:	09 95       	icall
	}
}
 460:	ff 91       	pop	r31
 462:	ef 91       	pop	r30
 464:	bf 91       	pop	r27
 466:	af 91       	pop	r26
 468:	9f 91       	pop	r25
 46a:	8f 91       	pop	r24
 46c:	7f 91       	pop	r23
 46e:	6f 91       	pop	r22
 470:	5f 91       	pop	r21
 472:	4f 91       	pop	r20
 474:	3f 91       	pop	r19
 476:	2f 91       	pop	r18
 478:	0f 90       	pop	r0
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	0f 90       	pop	r0
 47e:	1f 90       	pop	r1
 480:	18 95       	reti

00000482 <__vector_8>:

/*TIMER1 CTCB Mode ISR*/
void __vector_8 (void)		__attribute__((signal)) ;
void __vector_8 (void)
{
 482:	1f 92       	push	r1
 484:	0f 92       	push	r0
 486:	0f b6       	in	r0, 0x3f	; 63
 488:	0f 92       	push	r0
 48a:	11 24       	eor	r1, r1
 48c:	2f 93       	push	r18
 48e:	3f 93       	push	r19
 490:	4f 93       	push	r20
 492:	5f 93       	push	r21
 494:	6f 93       	push	r22
 496:	7f 93       	push	r23
 498:	8f 93       	push	r24
 49a:	9f 93       	push	r25
 49c:	af 93       	push	r26
 49e:	bf 93       	push	r27
 4a0:	ef 93       	push	r30
 4a2:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID] != NULL)
 4a4:	e0 91 7a 00 	lds	r30, 0x007A
 4a8:	f0 91 7b 00 	lds	r31, 0x007B
 4ac:	30 97       	sbiw	r30, 0x00	; 0
 4ae:	09 f0       	breq	.+2      	; 0x4b2 <__vector_8+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID]() ;
 4b0:	09 95       	icall
	}
}
 4b2:	ff 91       	pop	r31
 4b4:	ef 91       	pop	r30
 4b6:	bf 91       	pop	r27
 4b8:	af 91       	pop	r26
 4ba:	9f 91       	pop	r25
 4bc:	8f 91       	pop	r24
 4be:	7f 91       	pop	r23
 4c0:	6f 91       	pop	r22
 4c2:	5f 91       	pop	r21
 4c4:	4f 91       	pop	r20
 4c6:	3f 91       	pop	r19
 4c8:	2f 91       	pop	r18
 4ca:	0f 90       	pop	r0
 4cc:	0f be       	out	0x3f, r0	; 63
 4ce:	0f 90       	pop	r0
 4d0:	1f 90       	pop	r1
 4d2:	18 95       	reti

000004d4 <__vector_7>:

/*TIMER1 CTCA Mode ISR*/
void __vector_7 (void)		__attribute__((signal)) ;
void __vector_7 (void)
{
 4d4:	1f 92       	push	r1
 4d6:	0f 92       	push	r0
 4d8:	0f b6       	in	r0, 0x3f	; 63
 4da:	0f 92       	push	r0
 4dc:	11 24       	eor	r1, r1
 4de:	2f 93       	push	r18
 4e0:	3f 93       	push	r19
 4e2:	4f 93       	push	r20
 4e4:	5f 93       	push	r21
 4e6:	6f 93       	push	r22
 4e8:	7f 93       	push	r23
 4ea:	8f 93       	push	r24
 4ec:	9f 93       	push	r25
 4ee:	af 93       	push	r26
 4f0:	bf 93       	push	r27
 4f2:	ef 93       	push	r30
 4f4:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID] != NULL)
 4f6:	e0 91 78 00 	lds	r30, 0x0078
 4fa:	f0 91 79 00 	lds	r31, 0x0079
 4fe:	30 97       	sbiw	r30, 0x00	; 0
 500:	09 f0       	breq	.+2      	; 0x504 <__vector_7+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID]() ;
 502:	09 95       	icall
	}
}
 504:	ff 91       	pop	r31
 506:	ef 91       	pop	r30
 508:	bf 91       	pop	r27
 50a:	af 91       	pop	r26
 50c:	9f 91       	pop	r25
 50e:	8f 91       	pop	r24
 510:	7f 91       	pop	r23
 512:	6f 91       	pop	r22
 514:	5f 91       	pop	r21
 516:	4f 91       	pop	r20
 518:	3f 91       	pop	r19
 51a:	2f 91       	pop	r18
 51c:	0f 90       	pop	r0
 51e:	0f be       	out	0x3f, r0	; 63
 520:	0f 90       	pop	r0
 522:	1f 90       	pop	r1
 524:	18 95       	reti

00000526 <__vector_6>:

/*TIMER1 ICU ISR*/
void __vector_6 (void)		__attribute__((signal)) ;
void __vector_6 (void)
{
 526:	1f 92       	push	r1
 528:	0f 92       	push	r0
 52a:	0f b6       	in	r0, 0x3f	; 63
 52c:	0f 92       	push	r0
 52e:	11 24       	eor	r1, r1
 530:	2f 93       	push	r18
 532:	3f 93       	push	r19
 534:	4f 93       	push	r20
 536:	5f 93       	push	r21
 538:	6f 93       	push	r22
 53a:	7f 93       	push	r23
 53c:	8f 93       	push	r24
 53e:	9f 93       	push	r25
 540:	af 93       	push	r26
 542:	bf 93       	push	r27
 544:	ef 93       	push	r30
 546:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID] != NULL)
 548:	e0 91 76 00 	lds	r30, 0x0076
 54c:	f0 91 77 00 	lds	r31, 0x0077
 550:	30 97       	sbiw	r30, 0x00	; 0
 552:	09 f0       	breq	.+2      	; 0x556 <__vector_6+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID]() ;
 554:	09 95       	icall
	}
}
 556:	ff 91       	pop	r31
 558:	ef 91       	pop	r30
 55a:	bf 91       	pop	r27
 55c:	af 91       	pop	r26
 55e:	9f 91       	pop	r25
 560:	8f 91       	pop	r24
 562:	7f 91       	pop	r23
 564:	6f 91       	pop	r22
 566:	5f 91       	pop	r21
 568:	4f 91       	pop	r20
 56a:	3f 91       	pop	r19
 56c:	2f 91       	pop	r18
 56e:	0f 90       	pop	r0
 570:	0f be       	out	0x3f, r0	; 63
 572:	0f 90       	pop	r0
 574:	1f 90       	pop	r1
 576:	18 95       	reti

00000578 <__vector_5>:

/*TIMER2 Normal Mode ISR*/
void __vector_5 (void)		__attribute__((signal)) ;
void __vector_5 (void)
{
 578:	1f 92       	push	r1
 57a:	0f 92       	push	r0
 57c:	0f b6       	in	r0, 0x3f	; 63
 57e:	0f 92       	push	r0
 580:	11 24       	eor	r1, r1
 582:	2f 93       	push	r18
 584:	3f 93       	push	r19
 586:	4f 93       	push	r20
 588:	5f 93       	push	r21
 58a:	6f 93       	push	r22
 58c:	7f 93       	push	r23
 58e:	8f 93       	push	r24
 590:	9f 93       	push	r25
 592:	af 93       	push	r26
 594:	bf 93       	push	r27
 596:	ef 93       	push	r30
 598:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID] != NULL)
 59a:	e0 91 74 00 	lds	r30, 0x0074
 59e:	f0 91 75 00 	lds	r31, 0x0075
 5a2:	30 97       	sbiw	r30, 0x00	; 0
 5a4:	09 f0       	breq	.+2      	; 0x5a8 <__vector_5+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID]() ;
 5a6:	09 95       	icall
	}
}
 5a8:	ff 91       	pop	r31
 5aa:	ef 91       	pop	r30
 5ac:	bf 91       	pop	r27
 5ae:	af 91       	pop	r26
 5b0:	9f 91       	pop	r25
 5b2:	8f 91       	pop	r24
 5b4:	7f 91       	pop	r23
 5b6:	6f 91       	pop	r22
 5b8:	5f 91       	pop	r21
 5ba:	4f 91       	pop	r20
 5bc:	3f 91       	pop	r19
 5be:	2f 91       	pop	r18
 5c0:	0f 90       	pop	r0
 5c2:	0f be       	out	0x3f, r0	; 63
 5c4:	0f 90       	pop	r0
 5c6:	1f 90       	pop	r1
 5c8:	18 95       	reti

000005ca <__vector_4>:

/*TIMER2 CTC Mode ISR*/
void __vector_4 (void)		__attribute__((signal)) ;
void __vector_4 (void)
{
 5ca:	1f 92       	push	r1
 5cc:	0f 92       	push	r0
 5ce:	0f b6       	in	r0, 0x3f	; 63
 5d0:	0f 92       	push	r0
 5d2:	11 24       	eor	r1, r1
 5d4:	2f 93       	push	r18
 5d6:	3f 93       	push	r19
 5d8:	4f 93       	push	r20
 5da:	5f 93       	push	r21
 5dc:	6f 93       	push	r22
 5de:	7f 93       	push	r23
 5e0:	8f 93       	push	r24
 5e2:	9f 93       	push	r25
 5e4:	af 93       	push	r26
 5e6:	bf 93       	push	r27
 5e8:	ef 93       	push	r30
 5ea:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID] != NULL)
 5ec:	e0 91 72 00 	lds	r30, 0x0072
 5f0:	f0 91 73 00 	lds	r31, 0x0073
 5f4:	30 97       	sbiw	r30, 0x00	; 0
 5f6:	09 f0       	breq	.+2      	; 0x5fa <__vector_4+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID]() ;
 5f8:	09 95       	icall
	}
}
 5fa:	ff 91       	pop	r31
 5fc:	ef 91       	pop	r30
 5fe:	bf 91       	pop	r27
 600:	af 91       	pop	r26
 602:	9f 91       	pop	r25
 604:	8f 91       	pop	r24
 606:	7f 91       	pop	r23
 608:	6f 91       	pop	r22
 60a:	5f 91       	pop	r21
 60c:	4f 91       	pop	r20
 60e:	3f 91       	pop	r19
 610:	2f 91       	pop	r18
 612:	0f 90       	pop	r0
 614:	0f be       	out	0x3f, r0	; 63
 616:	0f 90       	pop	r0
 618:	1f 90       	pop	r1
 61a:	18 95       	reti

0000061c <setup>:
#define LED_PORT DIO_PORTD
#define LED_PIN  DIO_PIN6

void setup() {
	// Initialize DIO, ADC, and Timer modules
	DIO_enumSetPinDirection(LED_PORT, LED_PIN, DIO_PIN_OUTPUT);
 61c:	41 e0       	ldi	r20, 0x01	; 1
 61e:	65 e0       	ldi	r22, 0x05	; 5
 620:	83 e0       	ldi	r24, 0x03	; 3
 622:	fb dd       	rcall	.-1034   	; 0x21a <DIO_enumSetPinDirection>
	ADC_voidInit();
 624:	28 dd       	rcall	.-1456   	; 0x76 <ADC_voidInit>
	TIMER1_voidInit();
 626:	77 de       	rcall	.-786    	; 0x316 <TIMER1_voidInit>

	// Configure Timer1 for PWM output on OC1A (assuming this is handled inside TIMER1_voidInit)
	// TIMER_voidSetPWM(); // This might be needed depending on your specific TIMER1_voidInit implementation

	// Start ADC conversion in free running mode
	ADC_u8StartConversionAsynch(ADC_CHANNEL0, NULL, NULL); // Assuming continuous conversion
 628:	40 e0       	ldi	r20, 0x00	; 0
 62a:	50 e0       	ldi	r21, 0x00	; 0
 62c:	60 e0       	ldi	r22, 0x00	; 0
 62e:	70 e0       	ldi	r23, 0x00	; 0
 630:	80 e0       	ldi	r24, 0x00	; 0
 632:	67 cd       	rjmp	.-1330   	; 0x102 <ADC_u8StartConversionAsynch>
 634:	08 95       	ret

00000636 <loop>:
}

void loop() {
 636:	cf 93       	push	r28
 638:	df 93       	push	r29
 63a:	00 d0       	rcall	.+0      	; 0x63c <loop+0x6>
 63c:	cd b7       	in	r28, 0x3d	; 61
 63e:	de b7       	in	r29, 0x3e	; 62
	u16 adcResult = 0;
 640:	1a 82       	std	Y+2, r1	; 0x02
 642:	19 82       	std	Y+1, r1	; 0x01
	u16 pwmValue;

	// Read ADC result
	ADC_u8GetResultSync(ADC_CHANNEL0, &adcResult);
 644:	be 01       	movw	r22, r28
 646:	6f 5f       	subi	r22, 0xFF	; 255
 648:	7f 4f       	sbci	r23, 0xFF	; 255
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	20 dd       	rcall	.-1472   	; 0x8e <ADC_u8GetResultSync>

	// Map ADC result to PWM duty cycle
	pwmValue = (u16)(((u32)adcResult * 1023) / 500 ); // Assuming 10-bit ADC resolution
 64e:	29 81       	ldd	r18, Y+1	; 0x01
 650:	3a 81       	ldd	r19, Y+2	; 0x02
 652:	af ef       	ldi	r26, 0xFF	; 255
 654:	b3 e0       	ldi	r27, 0x03	; 3
 656:	31 d0       	rcall	.+98     	; 0x6ba <__umulhisi3>
 658:	24 ef       	ldi	r18, 0xF4	; 244
 65a:	31 e0       	ldi	r19, 0x01	; 1
 65c:	40 e0       	ldi	r20, 0x00	; 0
 65e:	50 e0       	ldi	r21, 0x00	; 0
 660:	0a d0       	rcall	.+20     	; 0x676 <__udivmodsi4>

	// Set PWM duty cycle (compare value)
	TIMER1_voidSetCTCA(pwmValue);
 662:	c9 01       	movw	r24, r18
 664:	90 de       	rcall	.-736    	; 0x386 <TIMER1_voidSetCTCA>

}
 666:	0f 90       	pop	r0
 668:	0f 90       	pop	r0
 66a:	df 91       	pop	r29
 66c:	cf 91       	pop	r28
 66e:	08 95       	ret

00000670 <main>:

int main(void) {
	setup();
 670:	d5 df       	rcall	.-86     	; 0x61c <setup>
	while(1) {
		loop();
 672:	e1 df       	rcall	.-62     	; 0x636 <loop>
	}
 674:	fe cf       	rjmp	.-4      	; 0x672 <main+0x2>

00000676 <__udivmodsi4>:
 676:	a1 e2       	ldi	r26, 0x21	; 33
 678:	1a 2e       	mov	r1, r26
 67a:	aa 1b       	sub	r26, r26
 67c:	bb 1b       	sub	r27, r27
 67e:	fd 01       	movw	r30, r26
 680:	0d c0       	rjmp	.+26     	; 0x69c <__udivmodsi4_ep>

00000682 <__udivmodsi4_loop>:
 682:	aa 1f       	adc	r26, r26
 684:	bb 1f       	adc	r27, r27
 686:	ee 1f       	adc	r30, r30
 688:	ff 1f       	adc	r31, r31
 68a:	a2 17       	cp	r26, r18
 68c:	b3 07       	cpc	r27, r19
 68e:	e4 07       	cpc	r30, r20
 690:	f5 07       	cpc	r31, r21
 692:	20 f0       	brcs	.+8      	; 0x69c <__udivmodsi4_ep>
 694:	a2 1b       	sub	r26, r18
 696:	b3 0b       	sbc	r27, r19
 698:	e4 0b       	sbc	r30, r20
 69a:	f5 0b       	sbc	r31, r21

0000069c <__udivmodsi4_ep>:
 69c:	66 1f       	adc	r22, r22
 69e:	77 1f       	adc	r23, r23
 6a0:	88 1f       	adc	r24, r24
 6a2:	99 1f       	adc	r25, r25
 6a4:	1a 94       	dec	r1
 6a6:	69 f7       	brne	.-38     	; 0x682 <__udivmodsi4_loop>
 6a8:	60 95       	com	r22
 6aa:	70 95       	com	r23
 6ac:	80 95       	com	r24
 6ae:	90 95       	com	r25
 6b0:	9b 01       	movw	r18, r22
 6b2:	ac 01       	movw	r20, r24
 6b4:	bd 01       	movw	r22, r26
 6b6:	cf 01       	movw	r24, r30
 6b8:	08 95       	ret

000006ba <__umulhisi3>:
 6ba:	a2 9f       	mul	r26, r18
 6bc:	b0 01       	movw	r22, r0
 6be:	b3 9f       	mul	r27, r19
 6c0:	c0 01       	movw	r24, r0
 6c2:	a3 9f       	mul	r26, r19
 6c4:	70 0d       	add	r23, r0
 6c6:	81 1d       	adc	r24, r1
 6c8:	11 24       	eor	r1, r1
 6ca:	91 1d       	adc	r25, r1
 6cc:	b2 9f       	mul	r27, r18
 6ce:	70 0d       	add	r23, r0
 6d0:	81 1d       	adc	r24, r1
 6d2:	11 24       	eor	r1, r1
 6d4:	91 1d       	adc	r25, r1
 6d6:	08 95       	ret

000006d8 <_exit>:
 6d8:	f8 94       	cli

000006da <__stop_program>:
 6da:	ff cf       	rjmp	.-2      	; 0x6da <__stop_program>
