
GccBoardProject2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004f6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000054a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000054a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000057c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a33  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000032e  00000000  00000000  000010ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009d1  00000000  00000000  000013d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  00001dac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000efe8  00000000  00000000  00001f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005a0  00000000  00000000  00010ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00011488  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00000f05  00000000  00000000  00011518  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	2f c0       	rjmp	.+94     	; 0x64 <__bad_interrupt>
   6:	00 00       	nop
   8:	2d c0       	rjmp	.+90     	; 0x64 <__bad_interrupt>
   a:	00 00       	nop
   c:	2b c0       	rjmp	.+86     	; 0x64 <__bad_interrupt>
   e:	00 00       	nop
  10:	29 c0       	rjmp	.+82     	; 0x64 <__bad_interrupt>
  12:	00 00       	nop
  14:	27 c0       	rjmp	.+78     	; 0x64 <__bad_interrupt>
  16:	00 00       	nop
  18:	25 c0       	rjmp	.+74     	; 0x64 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	23 c0       	rjmp	.+70     	; 0x64 <__bad_interrupt>
  1e:	00 00       	nop
  20:	21 c0       	rjmp	.+66     	; 0x64 <__bad_interrupt>
  22:	00 00       	nop
  24:	1f c0       	rjmp	.+62     	; 0x64 <__bad_interrupt>
  26:	00 00       	nop
  28:	1d c0       	rjmp	.+58     	; 0x64 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	1b c0       	rjmp	.+54     	; 0x64 <__bad_interrupt>
  2e:	00 00       	nop
  30:	19 c0       	rjmp	.+50     	; 0x64 <__bad_interrupt>
  32:	00 00       	nop
  34:	17 c0       	rjmp	.+46     	; 0x64 <__bad_interrupt>
  36:	00 00       	nop
  38:	15 c0       	rjmp	.+42     	; 0x64 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	13 c0       	rjmp	.+38     	; 0x64 <__bad_interrupt>
  3e:	00 00       	nop
  40:	11 c0       	rjmp	.+34     	; 0x64 <__bad_interrupt>
  42:	00 00       	nop
  44:	0f c0       	rjmp	.+30     	; 0x64 <__bad_interrupt>
  46:	00 00       	nop
  48:	0d c0       	rjmp	.+26     	; 0x64 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	0b c0       	rjmp	.+22     	; 0x64 <__bad_interrupt>
  4e:	00 00       	nop
  50:	09 c0       	rjmp	.+18     	; 0x64 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	1f d2       	rcall	.+1086   	; 0x4a0 <main>
  62:	47 c2       	rjmp	.+1166   	; 0x4f2 <_exit>

00000064 <__bad_interrupt>:
  64:	cd cf       	rjmp	.-102    	; 0x0 <__vectors>

00000066 <DIO_enumSetPinDirection>:
  
  DIO_ErrorState DIO_enumSetPinDirection  (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Dierction )
  {
	DIO_ErrorState LOC_enumState = DIO_OK ;

	  if (Copy_u8Dierction == DIO_PIN_OUTPUT)
  66:	41 30       	cpi	r20, 0x01	; 1
  68:	c1 f5       	brne	.+112    	; 0xda <DIO_enumSetPinDirection+0x74>
	  {
		  switch ( Copy_u8Port){
  6a:	81 30       	cpi	r24, 0x01	; 1
  6c:	91 f0       	breq	.+36     	; 0x92 <DIO_enumSetPinDirection+0x2c>
  6e:	28 f0       	brcs	.+10     	; 0x7a <DIO_enumSetPinDirection+0x14>
  70:	82 30       	cpi	r24, 0x02	; 2
  72:	d9 f0       	breq	.+54     	; 0xaa <DIO_enumSetPinDirection+0x44>
  74:	83 30       	cpi	r24, 0x03	; 3
  76:	29 f1       	breq	.+74     	; 0xc2 <DIO_enumSetPinDirection+0x5c>
  78:	6e c0       	rjmp	.+220    	; 0x156 <DIO_enumSetPinDirection+0xf0>
			 case DIO_PORTA : SET_BIT (DDRA, Copy_u8Pin);break;
  7a:	2a b3       	in	r18, 0x1a	; 26
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	02 c0       	rjmp	.+4      	; 0x86 <DIO_enumSetPinDirection+0x20>
  82:	88 0f       	add	r24, r24
  84:	99 1f       	adc	r25, r25
  86:	6a 95       	dec	r22
  88:	e2 f7       	brpl	.-8      	; 0x82 <DIO_enumSetPinDirection+0x1c>
  8a:	82 2b       	or	r24, r18
  8c:	8a bb       	out	0x1a, r24	; 26
  #include "DIO_interface.h"
  #include "DIO_private.h"
  
  DIO_ErrorState DIO_enumSetPinDirection  (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Dierction )
  {
	DIO_ErrorState LOC_enumState = DIO_OK ;
  8e:	81 e0       	ldi	r24, 0x01	; 1

	  if (Copy_u8Dierction == DIO_PIN_OUTPUT)
	  {
		  switch ( Copy_u8Port){
			 case DIO_PORTA : SET_BIT (DDRA, Copy_u8Pin);break;
  90:	08 95       	ret
			 case DIO_PORTB : SET_BIT (DDRB, Copy_u8Pin);break;
  92:	27 b3       	in	r18, 0x17	; 23
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <DIO_enumSetPinDirection+0x38>
  9a:	88 0f       	add	r24, r24
  9c:	99 1f       	adc	r25, r25
  9e:	6a 95       	dec	r22
  a0:	e2 f7       	brpl	.-8      	; 0x9a <DIO_enumSetPinDirection+0x34>
  a2:	82 2b       	or	r24, r18
  a4:	87 bb       	out	0x17, r24	; 23
  #include "DIO_interface.h"
  #include "DIO_private.h"
  
  DIO_ErrorState DIO_enumSetPinDirection  (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Dierction )
  {
	DIO_ErrorState LOC_enumState = DIO_OK ;
  a6:	81 e0       	ldi	r24, 0x01	; 1

	  if (Copy_u8Dierction == DIO_PIN_OUTPUT)
	  {
		  switch ( Copy_u8Port){
			 case DIO_PORTA : SET_BIT (DDRA, Copy_u8Pin);break;
			 case DIO_PORTB : SET_BIT (DDRB, Copy_u8Pin);break;
  a8:	08 95       	ret
			 case DIO_PORTC : SET_BIT (DDRC, Copy_u8Pin);break;
  aa:	24 b3       	in	r18, 0x14	; 20
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_enumSetPinDirection+0x50>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_enumSetPinDirection+0x4c>
  ba:	82 2b       	or	r24, r18
  bc:	84 bb       	out	0x14, r24	; 20
  #include "DIO_interface.h"
  #include "DIO_private.h"
  
  DIO_ErrorState DIO_enumSetPinDirection  (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Dierction )
  {
	DIO_ErrorState LOC_enumState = DIO_OK ;
  be:	81 e0       	ldi	r24, 0x01	; 1
	  if (Copy_u8Dierction == DIO_PIN_OUTPUT)
	  {
		  switch ( Copy_u8Port){
			 case DIO_PORTA : SET_BIT (DDRA, Copy_u8Pin);break;
			 case DIO_PORTB : SET_BIT (DDRB, Copy_u8Pin);break;
			 case DIO_PORTC : SET_BIT (DDRC, Copy_u8Pin);break;
  c0:	08 95       	ret
			 case DIO_PORTD : SET_BIT (DDRD, Copy_u8Pin);break;
  c2:	21 b3       	in	r18, 0x11	; 17
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_enumSetPinDirection+0x68>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_enumSetPinDirection+0x64>
  d2:	82 2b       	or	r24, r18
  d4:	81 bb       	out	0x11, r24	; 17
  #include "DIO_interface.h"
  #include "DIO_private.h"
  
  DIO_ErrorState DIO_enumSetPinDirection  (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Dierction )
  {
	DIO_ErrorState LOC_enumState = DIO_OK ;
  d6:	81 e0       	ldi	r24, 0x01	; 1
	  {
		  switch ( Copy_u8Port){
			 case DIO_PORTA : SET_BIT (DDRA, Copy_u8Pin);break;
			 case DIO_PORTB : SET_BIT (DDRB, Copy_u8Pin);break;
			 case DIO_PORTC : SET_BIT (DDRC, Copy_u8Pin);break;
			 case DIO_PORTD : SET_BIT (DDRD, Copy_u8Pin);break;
  d8:	08 95       	ret
		  }
	  } 
	  else if (Copy_u8Dierction == DIO_PIN_INPUT) {
  da:	41 11       	cpse	r20, r1
  dc:	3e c0       	rjmp	.+124    	; 0x15a <DIO_enumSetPinDirection+0xf4>
		  switch ( Copy_u8Port){
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	99 f0       	breq	.+38     	; 0x108 <DIO_enumSetPinDirection+0xa2>
  e2:	28 f0       	brcs	.+10     	; 0xee <DIO_enumSetPinDirection+0x88>
  e4:	82 30       	cpi	r24, 0x02	; 2
  e6:	e9 f0       	breq	.+58     	; 0x122 <DIO_enumSetPinDirection+0xbc>
  e8:	83 30       	cpi	r24, 0x03	; 3
  ea:	41 f1       	breq	.+80     	; 0x13c <DIO_enumSetPinDirection+0xd6>
  ec:	38 c0       	rjmp	.+112    	; 0x15e <DIO_enumSetPinDirection+0xf8>
			 case DIO_PORTA : CLR_BIT (DDRA, Copy_u8Pin);break;
  ee:	2a b3       	in	r18, 0x1a	; 26
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_enumSetPinDirection+0x94>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_enumSetPinDirection+0x90>
  fe:	80 95       	com	r24
 100:	82 23       	and	r24, r18
 102:	8a bb       	out	0x1a, r24	; 26
  #include "DIO_interface.h"
  #include "DIO_private.h"
  
  DIO_ErrorState DIO_enumSetPinDirection  (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Dierction )
  {
	DIO_ErrorState LOC_enumState = DIO_OK ;
 104:	81 e0       	ldi	r24, 0x01	; 1
			 case DIO_PORTD : SET_BIT (DDRD, Copy_u8Pin);break;
		  }
	  } 
	  else if (Copy_u8Dierction == DIO_PIN_INPUT) {
		  switch ( Copy_u8Port){
			 case DIO_PORTA : CLR_BIT (DDRA, Copy_u8Pin);break;
 106:	08 95       	ret
			 case DIO_PORTB : CLR_BIT (DDRB, Copy_u8Pin);break;
 108:	27 b3       	in	r18, 0x17	; 23
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_enumSetPinDirection+0xae>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_enumSetPinDirection+0xaa>
 118:	80 95       	com	r24
 11a:	82 23       	and	r24, r18
 11c:	87 bb       	out	0x17, r24	; 23
  #include "DIO_interface.h"
  #include "DIO_private.h"
  
  DIO_ErrorState DIO_enumSetPinDirection  (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Dierction )
  {
	DIO_ErrorState LOC_enumState = DIO_OK ;
 11e:	81 e0       	ldi	r24, 0x01	; 1
		  }
	  } 
	  else if (Copy_u8Dierction == DIO_PIN_INPUT) {
		  switch ( Copy_u8Port){
			 case DIO_PORTA : CLR_BIT (DDRA, Copy_u8Pin);break;
			 case DIO_PORTB : CLR_BIT (DDRB, Copy_u8Pin);break;
 120:	08 95       	ret
			 case DIO_PORTC : CLR_BIT (DDRC, Copy_u8Pin);break;
 122:	24 b3       	in	r18, 0x14	; 20
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_enumSetPinDirection+0xc8>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_enumSetPinDirection+0xc4>
 132:	80 95       	com	r24
 134:	82 23       	and	r24, r18
 136:	84 bb       	out	0x14, r24	; 20
  #include "DIO_interface.h"
  #include "DIO_private.h"
  
  DIO_ErrorState DIO_enumSetPinDirection  (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Dierction )
  {
	DIO_ErrorState LOC_enumState = DIO_OK ;
 138:	81 e0       	ldi	r24, 0x01	; 1
	  } 
	  else if (Copy_u8Dierction == DIO_PIN_INPUT) {
		  switch ( Copy_u8Port){
			 case DIO_PORTA : CLR_BIT (DDRA, Copy_u8Pin);break;
			 case DIO_PORTB : CLR_BIT (DDRB, Copy_u8Pin);break;
			 case DIO_PORTC : CLR_BIT (DDRC, Copy_u8Pin);break;
 13a:	08 95       	ret
			 case DIO_PORTD : CLR_BIT (DDRD, Copy_u8Pin);break;
 13c:	21 b3       	in	r18, 0x11	; 17
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_enumSetPinDirection+0xe2>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	6a 95       	dec	r22
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_enumSetPinDirection+0xde>
 14c:	80 95       	com	r24
 14e:	82 23       	and	r24, r18
 150:	81 bb       	out	0x11, r24	; 17
  #include "DIO_interface.h"
  #include "DIO_private.h"
  
  DIO_ErrorState DIO_enumSetPinDirection  (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Dierction )
  {
	DIO_ErrorState LOC_enumState = DIO_OK ;
 152:	81 e0       	ldi	r24, 0x01	; 1
	  else if (Copy_u8Dierction == DIO_PIN_INPUT) {
		  switch ( Copy_u8Port){
			 case DIO_PORTA : CLR_BIT (DDRA, Copy_u8Pin);break;
			 case DIO_PORTB : CLR_BIT (DDRB, Copy_u8Pin);break;
			 case DIO_PORTC : CLR_BIT (DDRC, Copy_u8Pin);break;
			 case DIO_PORTD : CLR_BIT (DDRD, Copy_u8Pin);break;
 154:	08 95       	ret
  #include "DIO_interface.h"
  #include "DIO_private.h"
  
  DIO_ErrorState DIO_enumSetPinDirection  (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Dierction )
  {
	DIO_ErrorState LOC_enumState = DIO_OK ;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	08 95       	ret
			 case DIO_PORTC : CLR_BIT (DDRC, Copy_u8Pin);break;
			 case DIO_PORTD : CLR_BIT (DDRD, Copy_u8Pin);break;
		  }
	  }
	  else {
		LOC_enumState = DIO_NOK ;
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	08 95       	ret
  #include "DIO_interface.h"
  #include "DIO_private.h"
  
  DIO_ErrorState DIO_enumSetPinDirection  (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Dierction )
  {
	DIO_ErrorState LOC_enumState = DIO_OK ;
 15e:	81 e0       	ldi	r24, 0x01	; 1
	  else {
		LOC_enumState = DIO_NOK ;
	  }
	  return LOC_enumState;
	  
  }
 160:	08 95       	ret

00000162 <DIO_enumSetPinValue>:
  
  DIO_ErrorState DIO_enumSetPinValue      (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value ) 
	  {
		  DIO_ErrorState LOC_enumState = DIO_OK ;
	  if (Copy_u8Value == DIO_PIN_HIGH)
 162:	41 30       	cpi	r20, 0x01	; 1
 164:	c1 f5       	brne	.+112    	; 0x1d6 <DIO_enumSetPinValue+0x74>
	  {
		  switch ( Copy_u8Port){
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	91 f0       	breq	.+36     	; 0x18e <DIO_enumSetPinValue+0x2c>
 16a:	28 f0       	brcs	.+10     	; 0x176 <DIO_enumSetPinValue+0x14>
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	d9 f0       	breq	.+54     	; 0x1a6 <DIO_enumSetPinValue+0x44>
 170:	83 30       	cpi	r24, 0x03	; 3
 172:	29 f1       	breq	.+74     	; 0x1be <DIO_enumSetPinValue+0x5c>
 174:	6e c0       	rjmp	.+220    	; 0x252 <DIO_enumSetPinValue+0xf0>
			 case DIO_PORTA : SET_BIT (PORTA, Copy_u8Pin);break;
 176:	2b b3       	in	r18, 0x1b	; 27
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_enumSetPinValue+0x20>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_enumSetPinValue+0x1c>
 186:	82 2b       	or	r24, r18
 188:	8b bb       	out	0x1b, r24	; 27
	  
  }
  
  DIO_ErrorState DIO_enumSetPinValue      (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value ) 
	  {
		  DIO_ErrorState LOC_enumState = DIO_OK ;
 18a:	81 e0       	ldi	r24, 0x01	; 1
	  if (Copy_u8Value == DIO_PIN_HIGH)
	  {
		  switch ( Copy_u8Port){
			 case DIO_PORTA : SET_BIT (PORTA, Copy_u8Pin);break;
 18c:	08 95       	ret
			 case DIO_PORTB : SET_BIT (PORTB, Copy_u8Pin);break;
 18e:	28 b3       	in	r18, 0x18	; 24
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_enumSetPinValue+0x38>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_enumSetPinValue+0x34>
 19e:	82 2b       	or	r24, r18
 1a0:	88 bb       	out	0x18, r24	; 24
	  
  }
  
  DIO_ErrorState DIO_enumSetPinValue      (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value ) 
	  {
		  DIO_ErrorState LOC_enumState = DIO_OK ;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
	  if (Copy_u8Value == DIO_PIN_HIGH)
	  {
		  switch ( Copy_u8Port){
			 case DIO_PORTA : SET_BIT (PORTA, Copy_u8Pin);break;
			 case DIO_PORTB : SET_BIT (PORTB, Copy_u8Pin);break;
 1a4:	08 95       	ret
			 case DIO_PORTC : SET_BIT (PORTC, Copy_u8Pin);break;
 1a6:	25 b3       	in	r18, 0x15	; 21
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_enumSetPinValue+0x50>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_enumSetPinValue+0x4c>
 1b6:	82 2b       	or	r24, r18
 1b8:	85 bb       	out	0x15, r24	; 21
	  
  }
  
  DIO_ErrorState DIO_enumSetPinValue      (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value ) 
	  {
		  DIO_ErrorState LOC_enumState = DIO_OK ;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
	  if (Copy_u8Value == DIO_PIN_HIGH)
	  {
		  switch ( Copy_u8Port){
			 case DIO_PORTA : SET_BIT (PORTA, Copy_u8Pin);break;
			 case DIO_PORTB : SET_BIT (PORTB, Copy_u8Pin);break;
			 case DIO_PORTC : SET_BIT (PORTC, Copy_u8Pin);break;
 1bc:	08 95       	ret
			 case DIO_PORTD : SET_BIT (PORTD, Copy_u8Pin);break;
 1be:	22 b3       	in	r18, 0x12	; 18
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_enumSetPinValue+0x68>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_enumSetPinValue+0x64>
 1ce:	82 2b       	or	r24, r18
 1d0:	82 bb       	out	0x12, r24	; 18
	  
  }
  
  DIO_ErrorState DIO_enumSetPinValue      (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value ) 
	  {
		  DIO_ErrorState LOC_enumState = DIO_OK ;
 1d2:	81 e0       	ldi	r24, 0x01	; 1
	  {
		  switch ( Copy_u8Port){
			 case DIO_PORTA : SET_BIT (PORTA, Copy_u8Pin);break;
			 case DIO_PORTB : SET_BIT (PORTB, Copy_u8Pin);break;
			 case DIO_PORTC : SET_BIT (PORTC, Copy_u8Pin);break;
			 case DIO_PORTD : SET_BIT (PORTD, Copy_u8Pin);break;
 1d4:	08 95       	ret
		  }
	  } 
	  else if (Copy_u8Value == DIO_PIN_LOW) {
 1d6:	41 11       	cpse	r20, r1
 1d8:	3e c0       	rjmp	.+124    	; 0x256 <DIO_enumSetPinValue+0xf4>
		  switch ( Copy_u8Port){
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	99 f0       	breq	.+38     	; 0x204 <DIO_enumSetPinValue+0xa2>
 1de:	28 f0       	brcs	.+10     	; 0x1ea <DIO_enumSetPinValue+0x88>
 1e0:	82 30       	cpi	r24, 0x02	; 2
 1e2:	e9 f0       	breq	.+58     	; 0x21e <DIO_enumSetPinValue+0xbc>
 1e4:	83 30       	cpi	r24, 0x03	; 3
 1e6:	41 f1       	breq	.+80     	; 0x238 <DIO_enumSetPinValue+0xd6>
 1e8:	38 c0       	rjmp	.+112    	; 0x25a <DIO_enumSetPinValue+0xf8>
			 case DIO_PORTA : CLR_BIT (PORTA, Copy_u8Pin);break;
 1ea:	2b b3       	in	r18, 0x1b	; 27
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_enumSetPinValue+0x94>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_enumSetPinValue+0x90>
 1fa:	80 95       	com	r24
 1fc:	82 23       	and	r24, r18
 1fe:	8b bb       	out	0x1b, r24	; 27
	  
  }
  
  DIO_ErrorState DIO_enumSetPinValue      (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value ) 
	  {
		  DIO_ErrorState LOC_enumState = DIO_OK ;
 200:	81 e0       	ldi	r24, 0x01	; 1
			 case DIO_PORTD : SET_BIT (PORTD, Copy_u8Pin);break;
		  }
	  } 
	  else if (Copy_u8Value == DIO_PIN_LOW) {
		  switch ( Copy_u8Port){
			 case DIO_PORTA : CLR_BIT (PORTA, Copy_u8Pin);break;
 202:	08 95       	ret
			 case DIO_PORTB : CLR_BIT (PORTB, Copy_u8Pin);break;
 204:	28 b3       	in	r18, 0x18	; 24
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_enumSetPinValue+0xae>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_enumSetPinValue+0xaa>
 214:	80 95       	com	r24
 216:	82 23       	and	r24, r18
 218:	88 bb       	out	0x18, r24	; 24
	  
  }
  
  DIO_ErrorState DIO_enumSetPinValue      (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value ) 
	  {
		  DIO_ErrorState LOC_enumState = DIO_OK ;
 21a:	81 e0       	ldi	r24, 0x01	; 1
		  }
	  } 
	  else if (Copy_u8Value == DIO_PIN_LOW) {
		  switch ( Copy_u8Port){
			 case DIO_PORTA : CLR_BIT (PORTA, Copy_u8Pin);break;
			 case DIO_PORTB : CLR_BIT (PORTB, Copy_u8Pin);break;
 21c:	08 95       	ret
			 case DIO_PORTC : CLR_BIT (PORTC, Copy_u8Pin);break;
 21e:	25 b3       	in	r18, 0x15	; 21
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_enumSetPinValue+0xc8>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_enumSetPinValue+0xc4>
 22e:	80 95       	com	r24
 230:	82 23       	and	r24, r18
 232:	85 bb       	out	0x15, r24	; 21
	  
  }
  
  DIO_ErrorState DIO_enumSetPinValue      (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value ) 
	  {
		  DIO_ErrorState LOC_enumState = DIO_OK ;
 234:	81 e0       	ldi	r24, 0x01	; 1
	  } 
	  else if (Copy_u8Value == DIO_PIN_LOW) {
		  switch ( Copy_u8Port){
			 case DIO_PORTA : CLR_BIT (PORTA, Copy_u8Pin);break;
			 case DIO_PORTB : CLR_BIT (PORTB, Copy_u8Pin);break;
			 case DIO_PORTC : CLR_BIT (PORTC, Copy_u8Pin);break;
 236:	08 95       	ret
			 case DIO_PORTD : CLR_BIT (PORTD, Copy_u8Pin);break;
 238:	22 b3       	in	r18, 0x12	; 18
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_enumSetPinValue+0xe2>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_enumSetPinValue+0xde>
 248:	80 95       	com	r24
 24a:	82 23       	and	r24, r18
 24c:	82 bb       	out	0x12, r24	; 18
	  
  }
  
  DIO_ErrorState DIO_enumSetPinValue      (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value ) 
	  {
		  DIO_ErrorState LOC_enumState = DIO_OK ;
 24e:	81 e0       	ldi	r24, 0x01	; 1
	  else if (Copy_u8Value == DIO_PIN_LOW) {
		  switch ( Copy_u8Port){
			 case DIO_PORTA : CLR_BIT (PORTA, Copy_u8Pin);break;
			 case DIO_PORTB : CLR_BIT (PORTB, Copy_u8Pin);break;
			 case DIO_PORTC : CLR_BIT (PORTC, Copy_u8Pin);break;
			 case DIO_PORTD : CLR_BIT (PORTD, Copy_u8Pin);break;
 250:	08 95       	ret
	  
  }
  
  DIO_ErrorState DIO_enumSetPinValue      (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value ) 
	  {
		  DIO_ErrorState LOC_enumState = DIO_OK ;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	08 95       	ret
			 case DIO_PORTB : CLR_BIT (PORTB, Copy_u8Pin);break;
			 case DIO_PORTC : CLR_BIT (PORTC, Copy_u8Pin);break;
			 case DIO_PORTD : CLR_BIT (PORTD, Copy_u8Pin);break;
		  }
	  }
	  else { LOC_enumState = DIO_NOK ;
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	08 95       	ret
	  
  }
  
  DIO_ErrorState DIO_enumSetPinValue      (u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value ) 
	  {
		  DIO_ErrorState LOC_enumState = DIO_OK ;
 25a:	81 e0       	ldi	r24, 0x01	; 1
		  }
	  }
	  else { LOC_enumState = DIO_NOK ;
	  }
	  return LOC_enumState ;
	  }
 25c:	08 95       	ret

0000025e <DIO_enumGetPinValue>:
	  
  
 DIO_ErrorState  DIO_enumGetPinValue          (u8 Copy_u8Port , u8 Copy_u8Pin ,  u8 * Copy_PtrData   ) {
	  DIO_ErrorState LOC_enumState = DIO_OK ;
	  if (( Copy_u8Port <= DIO_PORTD) && ( Copy_u8Pin <= DIO_PIN8)) {
 25e:	84 30       	cpi	r24, 0x04	; 4
 260:	08 f0       	brcs	.+2      	; 0x264 <DIO_enumGetPinValue+0x6>
 262:	60 c0       	rjmp	.+192    	; 0x324 <DIO_enumGetPinValue+0xc6>
 264:	68 30       	cpi	r22, 0x08	; 8
 266:	08 f0       	brcs	.+2      	; 0x26a <DIO_enumGetPinValue+0xc>
 268:	5f c0       	rjmp	.+190    	; 0x328 <DIO_enumGetPinValue+0xca>
	  
	  switch ( Copy_u8Port){
 26a:	81 30       	cpi	r24, 0x01	; 1
 26c:	e1 f0       	breq	.+56     	; 0x2a6 <DIO_enumGetPinValue+0x48>
 26e:	30 f0       	brcs	.+12     	; 0x27c <DIO_enumGetPinValue+0x1e>
 270:	82 30       	cpi	r24, 0x02	; 2
 272:	71 f1       	breq	.+92     	; 0x2d0 <DIO_enumGetPinValue+0x72>
 274:	83 30       	cpi	r24, 0x03	; 3
 276:	09 f4       	brne	.+2      	; 0x27a <DIO_enumGetPinValue+0x1c>
 278:	40 c0       	rjmp	.+128    	; 0x2fa <DIO_enumGetPinValue+0x9c>
 27a:	58 c0       	rjmp	.+176    	; 0x32c <DIO_enumGetPinValue+0xce>
			 case DIO_PORTA : * Copy_PtrData = GET_BIT (PINA, Copy_u8Pin);break;
 27c:	29 b3       	in	r18, 0x19	; 25
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	06 2e       	mov	r0, r22
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_enumGetPinValue+0x2c>
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	0a 94       	dec	r0
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_enumGetPinValue+0x28>
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	82 23       	and	r24, r18
 292:	93 23       	and	r25, r19
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_enumGetPinValue+0x3c>
 296:	95 95       	asr	r25
 298:	87 95       	ror	r24
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_enumGetPinValue+0x38>
 29e:	fa 01       	movw	r30, r20
 2a0:	80 83       	st	Z, r24
	  return LOC_enumState ;
	  }
	  
  
 DIO_ErrorState  DIO_enumGetPinValue          (u8 Copy_u8Port , u8 Copy_u8Pin ,  u8 * Copy_PtrData   ) {
	  DIO_ErrorState LOC_enumState = DIO_OK ;
 2a2:	81 e0       	ldi	r24, 0x01	; 1
	  if (( Copy_u8Port <= DIO_PORTD) && ( Copy_u8Pin <= DIO_PIN8)) {
	  
	  switch ( Copy_u8Port){
			 case DIO_PORTA : * Copy_PtrData = GET_BIT (PINA, Copy_u8Pin);break;
 2a4:	08 95       	ret
			 case DIO_PORTB : * Copy_PtrData = GET_BIT (PINB, Copy_u8Pin);break;
 2a6:	26 b3       	in	r18, 0x16	; 22
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	06 2e       	mov	r0, r22
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_enumGetPinValue+0x56>
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	0a 94       	dec	r0
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_enumGetPinValue+0x52>
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	82 23       	and	r24, r18
 2bc:	93 23       	and	r25, r19
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_enumGetPinValue+0x66>
 2c0:	95 95       	asr	r25
 2c2:	87 95       	ror	r24
 2c4:	6a 95       	dec	r22
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_enumGetPinValue+0x62>
 2c8:	fa 01       	movw	r30, r20
 2ca:	80 83       	st	Z, r24
	  return LOC_enumState ;
	  }
	  
  
 DIO_ErrorState  DIO_enumGetPinValue          (u8 Copy_u8Port , u8 Copy_u8Pin ,  u8 * Copy_PtrData   ) {
	  DIO_ErrorState LOC_enumState = DIO_OK ;
 2cc:	81 e0       	ldi	r24, 0x01	; 1
	  if (( Copy_u8Port <= DIO_PORTD) && ( Copy_u8Pin <= DIO_PIN8)) {
	  
	  switch ( Copy_u8Port){
			 case DIO_PORTA : * Copy_PtrData = GET_BIT (PINA, Copy_u8Pin);break;
			 case DIO_PORTB : * Copy_PtrData = GET_BIT (PINB, Copy_u8Pin);break;
 2ce:	08 95       	ret
			 case DIO_PORTC : * Copy_PtrData = GET_BIT (PINC, Copy_u8Pin);break;
 2d0:	23 b3       	in	r18, 0x13	; 19
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	06 2e       	mov	r0, r22
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_enumGetPinValue+0x80>
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	0a 94       	dec	r0
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_enumGetPinValue+0x7c>
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	82 23       	and	r24, r18
 2e6:	93 23       	and	r25, r19
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_enumGetPinValue+0x90>
 2ea:	95 95       	asr	r25
 2ec:	87 95       	ror	r24
 2ee:	6a 95       	dec	r22
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_enumGetPinValue+0x8c>
 2f2:	fa 01       	movw	r30, r20
 2f4:	80 83       	st	Z, r24
	  return LOC_enumState ;
	  }
	  
  
 DIO_ErrorState  DIO_enumGetPinValue          (u8 Copy_u8Port , u8 Copy_u8Pin ,  u8 * Copy_PtrData   ) {
	  DIO_ErrorState LOC_enumState = DIO_OK ;
 2f6:	81 e0       	ldi	r24, 0x01	; 1
	  if (( Copy_u8Port <= DIO_PORTD) && ( Copy_u8Pin <= DIO_PIN8)) {
	  
	  switch ( Copy_u8Port){
			 case DIO_PORTA : * Copy_PtrData = GET_BIT (PINA, Copy_u8Pin);break;
			 case DIO_PORTB : * Copy_PtrData = GET_BIT (PINB, Copy_u8Pin);break;
			 case DIO_PORTC : * Copy_PtrData = GET_BIT (PINC, Copy_u8Pin);break;
 2f8:	08 95       	ret
			 case DIO_PORTD : * Copy_PtrData = GET_BIT (PIND, Copy_u8Pin);break;
 2fa:	20 b3       	in	r18, 0x10	; 16
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	06 2e       	mov	r0, r22
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_enumGetPinValue+0xaa>
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	0a 94       	dec	r0
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_enumGetPinValue+0xa6>
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	82 23       	and	r24, r18
 310:	93 23       	and	r25, r19
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_enumGetPinValue+0xba>
 314:	95 95       	asr	r25
 316:	87 95       	ror	r24
 318:	6a 95       	dec	r22
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_enumGetPinValue+0xb6>
 31c:	fa 01       	movw	r30, r20
 31e:	80 83       	st	Z, r24
	  return LOC_enumState ;
	  }
	  
  
 DIO_ErrorState  DIO_enumGetPinValue          (u8 Copy_u8Port , u8 Copy_u8Pin ,  u8 * Copy_PtrData   ) {
	  DIO_ErrorState LOC_enumState = DIO_OK ;
 320:	81 e0       	ldi	r24, 0x01	; 1
	  
	  switch ( Copy_u8Port){
			 case DIO_PORTA : * Copy_PtrData = GET_BIT (PINA, Copy_u8Pin);break;
			 case DIO_PORTB : * Copy_PtrData = GET_BIT (PINB, Copy_u8Pin);break;
			 case DIO_PORTC : * Copy_PtrData = GET_BIT (PINC, Copy_u8Pin);break;
			 case DIO_PORTD : * Copy_PtrData = GET_BIT (PIND, Copy_u8Pin);break;
 322:	08 95       	ret
		  }
	  }
	  else {
		  LOC_enumState = DIO_NOK ;
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	08 95       	ret
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	08 95       	ret
	  return LOC_enumState ;
	  }
	  
  
 DIO_ErrorState  DIO_enumGetPinValue          (u8 Copy_u8Port , u8 Copy_u8Pin ,  u8 * Copy_PtrData   ) {
	  DIO_ErrorState LOC_enumState = DIO_OK ;
 32c:	81 e0       	ldi	r24, 0x01	; 1
	  else {
		  LOC_enumState = DIO_NOK ;
	  }
		  return LOC_enumState ;
	  
  }
 32e:	08 95       	ret

00000330 <SW_voidInit>:

  #include "DIO_interface.h"
  #include "SW_interface.h"
  

 void SW_voidInit(SW_Type SW_Config) {
 330:	1f 93       	push	r17
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	c6 2f       	mov	r28, r22
 338:	d7 2f       	mov	r29, r23
 33a:	18 2f       	mov	r17, r24
	 DIO_enumSetPinDirection(SW_Config.Port, SW_Config.Pin, DIO_PIN_INPUT);
 33c:	40 e0       	ldi	r20, 0x00	; 0
 33e:	67 2f       	mov	r22, r23
 340:	8c 2f       	mov	r24, r28
 342:	91 de       	rcall	.-734    	; 0x66 <DIO_enumSetPinDirection>
	 if (SW_Config.Pull_State == SW_INT_PULL_UP) {
 344:	11 11       	cpse	r17, r1
 346:	04 c0       	rjmp	.+8      	; 0x350 <SW_voidInit+0x20>
		 DIO_enumSetPinValue(SW_Config.Port, SW_Config.Pin, DIO_PIN_HIGH);
 348:	41 e0       	ldi	r20, 0x01	; 1
 34a:	6d 2f       	mov	r22, r29
 34c:	8c 2f       	mov	r24, r28
 34e:	09 df       	rcall	.-494    	; 0x162 <DIO_enumSetPinValue>
	 }
 }
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	1f 91       	pop	r17
 356:	08 95       	ret

00000358 <SW_u8GetPressed>:

 u8 SW_u8GetPressed(SW_Type SW_Config) {
 358:	1f 93       	push	r17
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	1f 92       	push	r1
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
 364:	96 2f       	mov	r25, r22
 366:	67 2f       	mov	r22, r23
 368:	18 2f       	mov	r17, r24
	 u8 pin_state = DIO_PIN_HIGH; 
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	89 83       	std	Y+1, r24	; 0x01
	 u8 result = SW_NOT_PRESSED;
	 DIO_ErrorState dio_state;

	 dio_state = DIO_enumGetPinValue(SW_Config.Port, SW_Config.Pin, &pin_state);
 36e:	ae 01       	movw	r20, r28
 370:	4f 5f       	subi	r20, 0xFF	; 255
 372:	5f 4f       	sbci	r21, 0xFF	; 255
 374:	89 2f       	mov	r24, r25
 376:	73 df       	rcall	.-282    	; 0x25e <DIO_enumGetPinValue>

	 if (dio_state == DIO_OK) {
 378:	81 30       	cpi	r24, 0x01	; 1
 37a:	81 f4       	brne	.+32     	; 0x39c <SW_u8GetPressed+0x44>
		 if (SW_Config.Pull_State == SW_INT_PULL_UP || SW_Config.Pull_State == SW_EXT_PULL_UP) {
 37c:	12 30       	cpi	r17, 0x02	; 2
 37e:	28 f4       	brcc	.+10     	; 0x38a <SW_u8GetPressed+0x32>
			 result = (pin_state == DIO_PIN_LOW) ? SW_PRESSED : SW_NOT_PRESSED;
 380:	99 81       	ldd	r25, Y+1	; 0x01
 382:	99 23       	and	r25, r25
 384:	71 f0       	breq	.+28     	; 0x3a2 <SW_u8GetPressed+0x4a>
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	0c c0       	rjmp	.+24     	; 0x3a2 <SW_u8GetPressed+0x4a>
			 } else if (SW_Config.Pull_State == SW_EXT_PULL_DOWN || SW_Config.Pull_State == SW_FLOATING) {
 38a:	12 50       	subi	r17, 0x02	; 2
 38c:	12 30       	cpi	r17, 0x02	; 2
 38e:	40 f4       	brcc	.+16     	; 0x3a0 <SW_u8GetPressed+0x48>
			 result = (pin_state == DIO_PIN_HIGH) ? SW_PRESSED : SW_NOT_PRESSED;
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	99 81       	ldd	r25, Y+1	; 0x01
 394:	91 30       	cpi	r25, 0x01	; 1
 396:	29 f0       	breq	.+10     	; 0x3a2 <SW_u8GetPressed+0x4a>
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	03 c0       	rjmp	.+6      	; 0x3a2 <SW_u8GetPressed+0x4a>
	 }
 }

 u8 SW_u8GetPressed(SW_Type SW_Config) {
	 u8 pin_state = DIO_PIN_HIGH; 
	 u8 result = SW_NOT_PRESSED;
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	01 c0       	rjmp	.+2      	; 0x3a2 <SW_u8GetPressed+0x4a>
 3a0:	80 e0       	ldi	r24, 0x00	; 0
			 result = (pin_state == DIO_PIN_HIGH) ? SW_PRESSED : SW_NOT_PRESSED;
		 }
	 }

	 return result;
 }
 3a2:	0f 90       	pop	r0
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	1f 91       	pop	r17
 3aa:	08 95       	ret

000003ac <setup>:
#define LEFT_PIN PA3
#define RIGHT_PIN PA4


void setup () {
	DIO_enumSetPinDirection(DIO_PORTD, IN1, DIO_PIN_OUTPUT);
 3ac:	41 e0       	ldi	r20, 0x01	; 1
 3ae:	61 e0       	ldi	r22, 0x01	; 1
 3b0:	83 e0       	ldi	r24, 0x03	; 3
 3b2:	59 de       	rcall	.-846    	; 0x66 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(DIO_PORTD, IN2, DIO_PIN_OUTPUT);
 3b4:	41 e0       	ldi	r20, 0x01	; 1
 3b6:	62 e0       	ldi	r22, 0x02	; 2
 3b8:	83 e0       	ldi	r24, 0x03	; 3
 3ba:	55 de       	rcall	.-854    	; 0x66 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(DIO_PORTD, IN3, DIO_PIN_OUTPUT);
 3bc:	41 e0       	ldi	r20, 0x01	; 1
 3be:	63 e0       	ldi	r22, 0x03	; 3
 3c0:	83 e0       	ldi	r24, 0x03	; 3
 3c2:	51 de       	rcall	.-862    	; 0x66 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(DIO_PORTD, IN4, DIO_PIN_OUTPUT);
 3c4:	41 e0       	ldi	r20, 0x01	; 1
 3c6:	64 e0       	ldi	r22, 0x04	; 4
 3c8:	83 e0       	ldi	r24, 0x03	; 3
 3ca:	4d de       	rcall	.-870    	; 0x66 <DIO_enumSetPinDirection>
	SW_Type forwardSwitch = {DIO_PORTA, FORWARD_PIN, SW_INT_PULL_UP};
	SW_Type backSwitch = {DIO_PORTA, BACK_PIN, SW_INT_PULL_UP};
	SW_Type leftSwitch = {DIO_PORTA, LEFT_PIN, SW_INT_PULL_UP};
	SW_Type rightSwitch = {DIO_PORTA, RIGHT_PIN, SW_INT_PULL_UP};

	SW_voidInit(stopSwitch);
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	70 e0       	ldi	r23, 0x00	; 0
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	ae df       	rcall	.-164    	; 0x330 <SW_voidInit>
	SW_voidInit(forwardSwitch);
 3d4:	60 e0       	ldi	r22, 0x00	; 0
 3d6:	71 e0       	ldi	r23, 0x01	; 1
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	aa df       	rcall	.-172    	; 0x330 <SW_voidInit>
	SW_voidInit(backSwitch);
 3dc:	60 e0       	ldi	r22, 0x00	; 0
 3de:	72 e0       	ldi	r23, 0x02	; 2
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	a6 df       	rcall	.-180    	; 0x330 <SW_voidInit>
	SW_voidInit(leftSwitch);
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	73 e0       	ldi	r23, 0x03	; 3
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	a2 df       	rcall	.-188    	; 0x330 <SW_voidInit>
	SW_voidInit(rightSwitch);
 3ec:	60 e0       	ldi	r22, 0x00	; 0
 3ee:	74 e0       	ldi	r23, 0x04	; 4
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	9e cf       	rjmp	.-196    	; 0x330 <SW_voidInit>
 3f4:	08 95       	ret

000003f6 <Stop>:
}

void Stop() {
	DIO_enumSetPinValue(DIO_PORTD, IN1, DIO_PIN_LOW);
 3f6:	40 e0       	ldi	r20, 0x00	; 0
 3f8:	61 e0       	ldi	r22, 0x01	; 1
 3fa:	83 e0       	ldi	r24, 0x03	; 3
 3fc:	b2 de       	rcall	.-668    	; 0x162 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(DIO_PORTD, IN2, DIO_PIN_LOW);
 3fe:	40 e0       	ldi	r20, 0x00	; 0
 400:	62 e0       	ldi	r22, 0x02	; 2
 402:	83 e0       	ldi	r24, 0x03	; 3
 404:	ae de       	rcall	.-676    	; 0x162 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(DIO_PORTD, IN3, DIO_PIN_LOW);
 406:	40 e0       	ldi	r20, 0x00	; 0
 408:	63 e0       	ldi	r22, 0x03	; 3
 40a:	83 e0       	ldi	r24, 0x03	; 3
 40c:	aa de       	rcall	.-684    	; 0x162 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(DIO_PORTD, IN4, DIO_PIN_LOW);
 40e:	40 e0       	ldi	r20, 0x00	; 0
 410:	64 e0       	ldi	r22, 0x04	; 4
 412:	83 e0       	ldi	r24, 0x03	; 3
 414:	a6 ce       	rjmp	.-692    	; 0x162 <DIO_enumSetPinValue>
 416:	08 95       	ret

00000418 <Forward>:
}

void Forward() {
	DIO_enumSetPinValue(DIO_PORTD, IN1, DIO_PIN_HIGH);
 418:	41 e0       	ldi	r20, 0x01	; 1
 41a:	61 e0       	ldi	r22, 0x01	; 1
 41c:	83 e0       	ldi	r24, 0x03	; 3
 41e:	a1 de       	rcall	.-702    	; 0x162 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(DIO_PORTD, IN2, DIO_PIN_LOW);
 420:	40 e0       	ldi	r20, 0x00	; 0
 422:	62 e0       	ldi	r22, 0x02	; 2
 424:	83 e0       	ldi	r24, 0x03	; 3
 426:	9d de       	rcall	.-710    	; 0x162 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(DIO_PORTD, IN3, DIO_PIN_HIGH);
 428:	41 e0       	ldi	r20, 0x01	; 1
 42a:	63 e0       	ldi	r22, 0x03	; 3
 42c:	83 e0       	ldi	r24, 0x03	; 3
 42e:	99 de       	rcall	.-718    	; 0x162 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(DIO_PORTD, IN4, DIO_PIN_LOW);
 430:	40 e0       	ldi	r20, 0x00	; 0
 432:	64 e0       	ldi	r22, 0x04	; 4
 434:	83 e0       	ldi	r24, 0x03	; 3
 436:	95 ce       	rjmp	.-726    	; 0x162 <DIO_enumSetPinValue>
 438:	08 95       	ret

0000043a <Back>:
}

void Back() {
	DIO_enumSetPinValue(DIO_PORTD, IN1, DIO_PIN_LOW);
 43a:	40 e0       	ldi	r20, 0x00	; 0
 43c:	61 e0       	ldi	r22, 0x01	; 1
 43e:	83 e0       	ldi	r24, 0x03	; 3
 440:	90 de       	rcall	.-736    	; 0x162 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(DIO_PORTD, IN2, DIO_PIN_HIGH);
 442:	41 e0       	ldi	r20, 0x01	; 1
 444:	62 e0       	ldi	r22, 0x02	; 2
 446:	83 e0       	ldi	r24, 0x03	; 3
 448:	8c de       	rcall	.-744    	; 0x162 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(DIO_PORTD, IN3, DIO_PIN_LOW);
 44a:	40 e0       	ldi	r20, 0x00	; 0
 44c:	63 e0       	ldi	r22, 0x03	; 3
 44e:	83 e0       	ldi	r24, 0x03	; 3
 450:	88 de       	rcall	.-752    	; 0x162 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(DIO_PORTD, IN4, DIO_PIN_HIGH);
 452:	41 e0       	ldi	r20, 0x01	; 1
 454:	64 e0       	ldi	r22, 0x04	; 4
 456:	83 e0       	ldi	r24, 0x03	; 3
 458:	84 ce       	rjmp	.-760    	; 0x162 <DIO_enumSetPinValue>
 45a:	08 95       	ret

0000045c <Left>:
}

void Left() {
	DIO_enumSetPinValue(DIO_PORTD, IN1, DIO_PIN_LOW);
 45c:	40 e0       	ldi	r20, 0x00	; 0
 45e:	61 e0       	ldi	r22, 0x01	; 1
 460:	83 e0       	ldi	r24, 0x03	; 3
 462:	7f de       	rcall	.-770    	; 0x162 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(DIO_PORTD, IN2, DIO_PIN_HIGH);
 464:	41 e0       	ldi	r20, 0x01	; 1
 466:	62 e0       	ldi	r22, 0x02	; 2
 468:	83 e0       	ldi	r24, 0x03	; 3
 46a:	7b de       	rcall	.-778    	; 0x162 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(DIO_PORTD, IN3, DIO_PIN_HIGH);
 46c:	41 e0       	ldi	r20, 0x01	; 1
 46e:	63 e0       	ldi	r22, 0x03	; 3
 470:	83 e0       	ldi	r24, 0x03	; 3
 472:	77 de       	rcall	.-786    	; 0x162 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(DIO_PORTD, IN4, DIO_PIN_LOW);
 474:	40 e0       	ldi	r20, 0x00	; 0
 476:	64 e0       	ldi	r22, 0x04	; 4
 478:	83 e0       	ldi	r24, 0x03	; 3
 47a:	73 ce       	rjmp	.-794    	; 0x162 <DIO_enumSetPinValue>
 47c:	08 95       	ret

0000047e <Right>:
}

void Right() {
	DIO_enumSetPinValue(DIO_PORTD, IN1, DIO_PIN_HIGH);
 47e:	41 e0       	ldi	r20, 0x01	; 1
 480:	61 e0       	ldi	r22, 0x01	; 1
 482:	83 e0       	ldi	r24, 0x03	; 3
 484:	6e de       	rcall	.-804    	; 0x162 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(DIO_PORTD, IN2, DIO_PIN_LOW);
 486:	40 e0       	ldi	r20, 0x00	; 0
 488:	62 e0       	ldi	r22, 0x02	; 2
 48a:	83 e0       	ldi	r24, 0x03	; 3
 48c:	6a de       	rcall	.-812    	; 0x162 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(DIO_PORTD, IN3, DIO_PIN_LOW);
 48e:	40 e0       	ldi	r20, 0x00	; 0
 490:	63 e0       	ldi	r22, 0x03	; 3
 492:	83 e0       	ldi	r24, 0x03	; 3
 494:	66 de       	rcall	.-820    	; 0x162 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(DIO_PORTD, IN4, DIO_PIN_HIGH);
 496:	41 e0       	ldi	r20, 0x01	; 1
 498:	64 e0       	ldi	r22, 0x04	; 4
 49a:	83 e0       	ldi	r24, 0x03	; 3
 49c:	62 ce       	rjmp	.-828    	; 0x162 <DIO_enumSetPinValue>
 49e:	08 95       	ret

000004a0 <main>:
}

int main (void)
{
	setup();
 4a0:	85 df       	rcall	.-246    	; 0x3ac <setup>
		SW_Type forwardSwitch = {DIO_PORTA, FORWARD_PIN, SW_INT_PULL_UP};
		SW_Type backSwitch = {DIO_PORTA, BACK_PIN, SW_INT_PULL_UP};
		SW_Type leftSwitch = {DIO_PORTA, LEFT_PIN, SW_INT_PULL_UP};
		SW_Type rightSwitch = {DIO_PORTA, RIGHT_PIN, SW_INT_PULL_UP};
			
		if (SW_u8GetPressed(stopSwitch) == SW_PRESSED) {
 4a2:	60 e0       	ldi	r22, 0x00	; 0
 4a4:	70 e0       	ldi	r23, 0x00	; 0
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	57 df       	rcall	.-338    	; 0x358 <SW_u8GetPressed>
 4aa:	81 30       	cpi	r24, 0x01	; 1
 4ac:	11 f4       	brne	.+4      	; 0x4b2 <main+0x12>
			Stop();
 4ae:	a3 df       	rcall	.-186    	; 0x3f6 <Stop>
 4b0:	f8 cf       	rjmp	.-16     	; 0x4a2 <main+0x2>
			} else if (SW_u8GetPressed(forwardSwitch) == SW_PRESSED) {
 4b2:	60 e0       	ldi	r22, 0x00	; 0
 4b4:	71 e0       	ldi	r23, 0x01	; 1
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	4f df       	rcall	.-354    	; 0x358 <SW_u8GetPressed>
 4ba:	81 30       	cpi	r24, 0x01	; 1
 4bc:	11 f4       	brne	.+4      	; 0x4c2 <main+0x22>
			Forward();
 4be:	ac df       	rcall	.-168    	; 0x418 <Forward>
 4c0:	f0 cf       	rjmp	.-32     	; 0x4a2 <main+0x2>
			} else if (SW_u8GetPressed(backSwitch) == SW_PRESSED) {
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	72 e0       	ldi	r23, 0x02	; 2
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	47 df       	rcall	.-370    	; 0x358 <SW_u8GetPressed>
 4ca:	81 30       	cpi	r24, 0x01	; 1
 4cc:	11 f4       	brne	.+4      	; 0x4d2 <main+0x32>
			Back();
 4ce:	b5 df       	rcall	.-150    	; 0x43a <Back>
 4d0:	e8 cf       	rjmp	.-48     	; 0x4a2 <main+0x2>
			} else if (SW_u8GetPressed(leftSwitch) == SW_PRESSED) {
 4d2:	60 e0       	ldi	r22, 0x00	; 0
 4d4:	73 e0       	ldi	r23, 0x03	; 3
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	3f df       	rcall	.-386    	; 0x358 <SW_u8GetPressed>
 4da:	81 30       	cpi	r24, 0x01	; 1
 4dc:	11 f4       	brne	.+4      	; 0x4e2 <main+0x42>
			Left();
 4de:	be df       	rcall	.-132    	; 0x45c <Left>
 4e0:	e0 cf       	rjmp	.-64     	; 0x4a2 <main+0x2>
			} else if (SW_u8GetPressed(rightSwitch) == SW_PRESSED) {
 4e2:	60 e0       	ldi	r22, 0x00	; 0
 4e4:	74 e0       	ldi	r23, 0x04	; 4
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	37 df       	rcall	.-402    	; 0x358 <SW_u8GetPressed>
 4ea:	81 30       	cpi	r24, 0x01	; 1
 4ec:	d1 f6       	brne	.-76     	; 0x4a2 <main+0x2>
			Right();
 4ee:	c7 df       	rcall	.-114    	; 0x47e <Right>
		}	
	}
 4f0:	d8 cf       	rjmp	.-80     	; 0x4a2 <main+0x2>

000004f2 <_exit>:
 4f2:	f8 94       	cli

000004f4 <__stop_program>:
 4f4:	ff cf       	rjmp	.-2      	; 0x4f4 <__stop_program>
